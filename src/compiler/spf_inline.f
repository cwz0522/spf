HEX
: R>     ['] C-R>    MACRO, ;   IMMEDIATE
: >R     ['] C->R    MACRO, ;   IMMEDIATE
: RDROP  ['] C-RDROP MACRO, ;   IMMEDIATE

: ?DUP   STATE @
                 IF  HERE TO :-SET
                      ['] C-?DUP  MACRO,
                     HERE TO :-SET \ нужно как в THEN
                 ELSE ?DUP
                 THEN ;   IMMEDIATE

: EXECUTE STATE @ IF
                  ['] C-EXECUTE MACRO,
                  ELSE EXECUTE
                  THEN ; IMMEDIATE

: THROW ( k*x n -- k*x | i*x n ) \ 94 EXCEPTION
\ Если любые биты n ненулевые, взять верхний кадр исключений со стека
\ исключений, включая все на стеке возвратов над этим кадром. Затем
\ восстановить спецификации входного потока, который использовался перед
\ соответствующим CATCH, и установить глубины всех стеков, определенных
\ в этом Стандарте, в то состояние, которое было сохранено в кадре
\ исключений (i - это то же число, что и i во входных аргументах
\ соответствующего CATCH), положить n на вершину стека данных и передать
\ управление в точку сразу после CATCH, которое положило этот кадр
\ исключений.
\ Если вершина стека не ноль, и на стеке исключений есть кадр 
\ исключений, то поведение следующее:
\   Если n=-1, выполнить функцию ABORT (версию ABORT из слов CORE), 
\   не выводя сообщений.
\   Если n=-2, выполнить функцию ABORT" (версию ABORT" из слов CORE), 
\   выводя символы ccc, ассоциированные с ABORT", генерирующим THROW.
\   Иначе система может вывести на дисплей зависящее от реализации 
\   сообщение об условии, соответствующем THROW с кодом n. Затем 
\   система выполнит функцию ABORT (версию ABORT из CORE).
     STATE @ IF
     0x850FC00B , \  or eax, eax \  jnz near
     ['] (THROW) HERE CELL+ - ,
     ['] DROP    MACRO,   \ без MACRO, оптмимизации не будет
     ELSE THROW
     THEN
; IMMEDIATE
DECIMAL