<a id="start"/>

[SPF](readme.en.html) ANS support
=================================

<title>SPF ANS support</title>

<i>Documentation for implementation-specific issues of the ANS standard as required
by section {std 4.}</i>

<small>Last update: $Date$</small>

----

[[Russian](ans.ru.html)] [[English](ans.en.html)]

----

##Contents

* [qqq](#qqq)
* [Implementation-defined options](#impl)
* [Ambigous conditions](#amb)
* [Other system documentation](#other)

----
<a id="qqq"/>
###[qqq](#qqq)

Maximum ANS conformity is achieved by including `lib/include/ansi.f`.
Additional words are defined, some of them dummies, etc. 

Also, a non-standard optimization of FILE wordset is fixed - `OPEN-FILE`,
`CREATE-FILE` and other implicitly treat the input string as zero-ended (ignoring the
length parameter). `lib/include/ansi-file.f` will add an extra zero byte in
such case, after copying the file name to the dynamic buffer, which remains
allocated for future use. You don't really need such behaviour when
defining file names with string literal `S"` or string libraries
`~ac/lib/str*.f`, as they ensure there is an extra zero byte. Though it can be
helpful for using non-SPF libraries.

----
<a id="impl"/>
###[Implementation-defined options](#impl)

* aligned address requirements ({std 3.1.3.3} Addresses); 

  No requirements. You can access data at any address. Though `CREATE` aligns
  code to even adresses for more speed.

* behavior of {std 6.1.1320} EMIT for non-graphic characters;
  
  `TYPE` and `EMIT` fully depend on the OS API for handling special chracters,
  on Windows this results in performing special assigned actions such as Line
  Feed, Carriage Return, Beep etc

* character editing of {std 6.1.0695} ACCEPT and {std 6.2.1390} EXPECT;

  `EXPECT` is not available (obsolete). `ACCEPT` fully depends on the
  capabilities of the shell. On Windows by default it provides command history
  and convenient one line editing with arrows, Ins, Del, Bksp etc

* character set ({std 3.1.2} Character types, {std 6.1.1320} EMIT, {std 6.1.1750} KEY); 

  ?

* character-aligned address requirements ({std 3.1.3.3} Addresses); 

  No requirements are imposed. Character aligned data can start at any address.

* character-set-extensions matching characteristics ({std 3.4.2} Finding definition names); 

  The definition name matches the search string when and only when the
  corresponding characters in both strings are equal. As a consequence, SPF is
  case-sensitive.

* conditions under which control characters match a space delimiter ({std 3.4.1.1} Delimiters); 

  Parser treats all characters with ascii code less or equal to 32 (`BL`) as
  delimiters. This behaviour doesn't depend on the input source.

* format of the control-flow stack ({std 3.2.3.2} Control-flow stack); 

  Control flow stack is available and implemented using the data stack.
  Separate control flow stack implementation is available as an extension
  `~mak/lib/a_if.f`.

* conversion of digits larger than thirty-five ({std 3.2.1.2} Digit conversion); 

  SPF converts digits according to the ASCII character table, so `50 BASE ! a 0[ DECIMAL . .` 
  will produce `36 42`.

* display after input terminates in {std 6.1.0695} ACCEPT and {std 6.2.1390} EXPECT; 

  Depends on the shell, by default the input is echoed while typing and
  remains on the screen at the same position when input is finished, with
  additional carriage return.

* exception abort sequence (as in {std 6.1.0680} ABORT");

  ?

* input line terminator ({std 3.2.4.1} User input device); 

  Input line is terminated with the sequence of two characters CRLF (ASCII codes
  hex 0D 0A). `UNIX-LINES` switches to LF (ASCII hex 0x0A), `DOS-LINES` restores
  default behavior. Current input line terminator is `EOLN ( -- a u )`.

* maximum size of a counted string, in characters ({std 3.1.3.4} Counted strings, {std 6.1.2450} WORD); 

  255 characters

* maximum size of a parsed string ({std 3.4.1} Parsing); 

  255 characters ?

* maximum size of a definition name, in characters ({std 3.3.1.2} Definition names); 

  255 characters ?

* maximum string length for {std 6.1.1345} ENVIRONMENT?, in characters; 

  not limited by implementation of `ENVIRONMENT?`

* method of selecting {std 3.2.4.1} User input device; 

  User input is a file with handle `H-STDIN`. By default it is a standard
  input stream, i.e. console.

* method of selecting {std 3.2.4.2} User output device; 

  TYPE outputs to the file which handle is `H-STDOUT`. By default it goes to
  standard output i.e. console window.

* methods of dictionary compilation ({std 3.3} The Forth dictionary); 

* number of bits in one address unit ({std 3.1.3.3} Addresses); 

  8 bits in one address unit.

* number representation and arithmetic ({std 3.2.1.1} Internal number representation); 

  ?

* ranges for n, +n, u, d, +d, and ud ({std 3.1.3} Single-cell types, {std 3.1.4} Cell-pair types); 

  -2147483648 <= n <= 2147483647  
  0 <= +n <= 2147483647  
  0 <= u <= 4294967295  
  -2^63 <= d <= 2^63 - 1  
  0 <= +d <= 2^63 - 1  
  0 <= ud <= 2^64

* read-only data-space regions ({std 3.3.3} Data space); 

* size of buffer at {std 6.1.2450} WORD ({std 3.3.3.6} Other transient regions); 

  255 bytes.

* size of one cell in address units ({std 3.1.3} Single-cell types); 

  4 address units

* size of one character in address units ({std 3.1.2} Character types); 

  1 address unit

* size of the keyboard terminal input buffer ({std 3.3.3.5} Input buffers); 

  1024 bytes

* size of the pictured numeric output string buffer ({std 3.3.3.6} Other transient regions); 

  4096 bytes

* size of the scratch area whose address is returned by {std 6.2.2000} PAD ({std 3.3.3.6} Other transient regions); 

  1024 bytes

* system case-sensitivity characteristics ({std 3.4.2} Finding definition names); 

  SPF kernel is case sensitive. Extension `lib/ext/caseins.f` replaces
  `SEARCH-WORDLIST` to perform case-insensitive search.

* system prompt ({std 3.4} The Forth text interpreter, {std 6.1.2050} QUIT); 

  None

* type of division rounding ({std 3.2.2.1} Integer division, {std 6.1.0100} */, {std 6.1.0110} */MOD, {std 6.1.0230} /, {std 6.1.0240} /MOD, {std 6.1.1890} MOD); 

  ?

* values of {std 6.1.2250} STATE when true; 

  TRUE i.e. -1




* values returned after arithmetic overflow ({std 3.2.2.2} Other integer operations); 

  

* whether the current definition can be found after {std 6.1.1250} DOES> ({std 6.1.0450} :).

* Values used in the system by {std 9.6.1.0875} CATCH and {std 9.6.1.2275} THROW ({std 9.3.1} THROW values, {std 9.3.5} Possible actions on an ambiguous condition).

* encoding of keyboard events ({std 10.6.2.1305} EKEY);

* duration of a system clock tick;

* repeatability to be expected from execution of {std 10.6.2.1905} MS.

* file access methods used by {std 11.6.1.0765} BIN, {std 11.6.1.1010} CREATE-FILE, {std 11.6.1.1970} OPEN-FILE, {std 11.6.1.2054} R/O, {std 11.6.1.2056} R/W, and {std 11.6.1.2425} W/O;

* file exceptions;

* file line terminator ({std 11.6.1.2090} READ-LINE);

  See input line terminator explanation.

* file name format ({std 11.3.1.4} File names);

  File paths can contain forward and backslashes as directory separators.

* information returned by {std 11.6.2.1524} FILE-STATUS;

  Not implemented.

* input file state after an exception ({std 11.6.1.1717} INCLUDE-FILE, {std 11.6.1.1718} INCLUDED);

* ior values and meaning ({std 11.3.1.2} I/O results);

  ior values can be THROWn directly.

* maximum depth of file input nesting ({std 11.3.4} Input source);

  SPF allows at most 64 INCLUDED nestings.

* maximum size of input line ({std 11.3.6} Parsing);

* methods for mapping block ranges to files ({std 11.3.2} Blocks in files);

  Not implemented.

* number of string buffers provided ({std 11.6.1.2165} S");

  1

* size of string buffer used by {std 11.6.1.2165} S".

  The same as for the input line.



* format and range of floating-point numbers ({std 12.3.1} Data types, {std 12.6.1.2143} REPRESENT);

* results of {std 12.6.1.2143} REPRESENT when float is out of range;

* rounding or truncation of floating-point numbers ({std 12.3.1.2} Floating-point numbers);

* size of floating-point stack ({std 12.3.3} Floating-point stack);

  6

* width of floating-point stack ({std 12.3.3} Floating-point stack).

  4, 8 or 10 bytes.

* maximum number of locals in a definition ({std 13.3.3} Processing locals, {std 13.6.2.1795} LOCALS|).

  Not limited (?)

* values and meaning of ior ({std 14.3.1} I/O Results data type, {std 14.6.1.0707} ALLOCATE, {std 14.6.1.1605} FREE, {std 14.6.1.2145} RESIZE).

* ending sequence for input following {std 15.6.2.0470} ;CODE and {std 15.6.2.0930} CODE;

* manner of processing input following {std 15.6.2.0470} ;CODE and {std 15.6.2.0930} CODE;

* search-order capability for {std 15.6.2.1300} EDITOR and {std 15.6.2.0740} ASSEMBLER ({std 15.3.3} The Forth dictionary);

* source and format of display by {std 15.6.1.2194} SEE.

  SEE is implemented as a disassembler in the `lib/ext/disasm.f` extension.

* maximum number of word lists in the search order ({std 16.3.3} Finding definition names, {std 16.6.1.2197} SET-ORDER);

  16

* minimum search order ({std 16.6.1.2197} SET-ORDER, {std 16.6.2.1965} ONLY).

  FORTH-WORDLIST


----
<a id="amb"/>
###[Ambiguous conditions](#amb)

* a name is neither a valid definition name nor a valid number during text interpretation ({std 3.4} The Forth text interpreter); 

* a definition name exceeded the maximum length allowed ({std 3.3.1.2} Definition names); 

* addressing a region not listed in {std 3.3.3} Data Space; 

* argument type incompatible with specified input parameter, e.g., passing a flag to a word expecting an n ({std 3.1} Data types); 

* attempting to obtain the execution token, (e.g., with {std 6.1.0070} ', {std 6.1.1550} FIND, etc.) of a definition with undefined interpretation semantics; 

* dividing by zero ({std 6.1.0100} \*/, {std 6.1.0110} \*/MOD, {std 6.1.0230} /, {std 6.1.0240} /MOD, {std 6.1.1561} FM/MOD, {std 6.1.1890} MOD, {std 6.1.2214} SM/REM, {std 6.1.2370} UM/MOD, {std 8.6.1.1820} M*/); 

  Exception 0xC0000094

* insufficient data-stack space or return-stack space (stack overflow); 

  Data stack and return stack share the same space (data stack grows up from
  the start, return stack grows down from the end), so stack overflow results
  in overwriting another stack, leading to strange behavior or system
  exception. Extension `~ss/ext/stack-guard.f` tries to detect stack overflow
  and throw the appropriate exception.

* insufficient space for loop-control parameters; 

  ?

* insufficient space in the dictionary; 

* interpretating a word with undefined interpretation semantics; 

* modifying the contents of the input buffer or a string literal ({std 3.3.3.4} Text-literal regions, {std 3.3.3.5} Input buffers); 

* overflow of a pictured numeric output string; 

* parsed string overflow; 

* producing a result out of range, e.g., multiplication (using \*) results in a value too big to be represented by a single-cell integer ({std 6.1.0090} \*, {std 6.1.0100} \*/, {std 6.1.0110} \*/MOD, {std 6.1.0570} >NUMBER, {std 6.1.1561} FM/MOD, {std 6.1.2214} SM/REM, {std 6.1.2370} UM/MOD, {std 6.2.0970} CONVERT, {std 8.6.1.1820} M*/); 

* reading from an empty data stack or return stack (stack underflow); 

* unexpected end of input buffer, resulting in an attempt to use a zero-length string as a name; 



* \>IN greater than size of input buffer ({std 3.4.1} Parsing); 

* {std 6.1.2120} RECURSE appears after {std 6.1.1250} DOES>; 

* argument input source different than current input source for {std 6.2.2148} RESTORE-INPUT; 

* data space containing definitions is de-allocated ({std 3.3.3.2} Contiguous regions); 

* data space read/write with incorrect alignment ({std 3.3.3.1} Address alignment); 

* data-space pointer not properly aligned ({std 6.1.0150} ,, {std 6.1.0860} C,); 

* less than u+2 stack items ({std 6.2.2030} PICK, {std 6.2.2150} ROLL); 

* loop-control parameters not available ( {std 6.1.0140} +LOOP, {std 6.1.1680} I, {std 6.1.1730} J, {std 6.1.1760} LEAVE, {std 6.1.1800} LOOP, {std 6.1.2380} UNLOOP); 

* most recent definition does not have a name ({std 6.1.1710} IMMEDIATE); 

* name not defined by {std 6.2.2405} VALUE used by {std 6.2.2295} TO; 

* name not found ({std 6.1.0070} ', {std 6.1.2033} POSTPONE, {std 6.1.2510} ['], {std 6.2.2530} [COMPILE]); 

* parameters are not of the same type ({std 6.1.1240} DO, {std 6.2.0620} ?DO, {std 6.2.2440} WITHIN); 

* {std 6.1.2033} POSTPONE or {std 6.2.2530} [COMPILE] applied to {std 6.2.2295} TO; 

* string longer than a counted string returned by {std 6.1.2450} WORD; 

* u greater than or equal to the number of bits in a cell ({std 6.1.1805} LSHIFT, {std 6.1.2162} RSHIFT); 

* word not defined via {std 6.1.1000} CREATE ({std 6.1.0550} >BODY, {std 6.1.1250} DOES>); 

* words improperly used outside {std 6.1.0490} <# and {std 6.1.0040} #> ({std 6.1.0030} #, {std 6.1.0050} #S, {std 6.1.1670} HOLD, {std 6.1.2210} SIGN). 




* {std 10.6.1.0742} AT-XY operation can't be performed on user output device.

* attempting to position a file outside its boundaries ({std 11.6.1.2142} REPOSITION-FILE);

* attempting to read from file positions not yet written ({std 11.6.1.2080} READ-FILE, {std 11.6.1.2090} READ-LINE);

* fileid is invalid ({std 11.6.1.1717} INCLUDE-FILE);

* I/O exception reading or closing fileid ({std 11.6.1.1717} INCLUDE-FILE, {std 11.6.1.1718} INCLUDED);

* named file cannot be opened ({std 11.6.1.1718} INCLUDED);

* requesting an unmapped block number ({std 11.3.2} Blocks in files);

* using {std 11.6.1.2218} SOURCE-ID when {std 7.6.1.0790} BLK is not zero.



* DF@ or DF! is used with an address that is not double-float aligned;

  Ok

* F@ or F! is used with an address that is not float aligned;

  Ok

* SF@ or SF! is used with an address that is not single-float aligned;

  Ok

* floating point result out of range (e.g., in {std 12.6.1.1430} F/);



* BASE is not decimal ({std 12.6.1.2143} REPRESENT, {std 12.6.2.1427} F., {std 12.6.2.1513} FE., {std 12.6.2.1613} FS.);

* both arguments equal zero ({std 12.6.2.1489} FATAN2);

  result is zero

* cosine of argument is zero for {std 12.6.2.1625} FTAN;

* d can't be precisely represented as float in {std 12.6.1.1130} D>F;

* dividing by zero ({std 12.6.1.1430} F/);

  `lib/include/float2.f` has two modes of operation - `SILENT-MODE` and
  `ERROR-MODE`. In the first case - the result of dividing by zero is
  infinity, in latter case - subsequent floating operation will raise an
  exception.

* exponent too big for conversion ({std 12.6.2.1203} DF!, {std 12.6.2.1204} DF@, {std 12.6.2.2202} SF!, {std 12.6.2.2203} SF@);

* float less than one ({std 12.6.2.1477} FACOSH);

* float less than or equal to minus-one ({std 12.6.2.1554} FLNP1);

* float less than or equal to zero ({std 12.6.2.1553} FLN, {std 12.6.2.1557} FLOG);

* float less than zero ({std 12.6.2.1487} FASINH, {std 12.6.2.1618} FSQRT);

* float magnitude greater than one ({std 12.6.2.1476} FACOS, {std 12.6.2.1486} FASIN, {std 12.6.2.1491} FATANH);

* integer part of float can't be represented by d in {std 12.6.1.1470} F>D;

* string larger than pictured-numeric output area ({std 12.6.2.1427} F., {std 12.6.2.1513} FE., {std 12.6.2.1613} FS.).

* executing a named local while in interpretation state ({std 13.6.1.0086} (LOCAL));

* name not defined by VALUE or LOCAL ({std 13.6.1.2295} TO).

  Mainly this will result in run-time error. `TO` executes the xt from the
  defined offset in the body of the word, if this code is invalid (which is
  the case, when the word was created not as `VALUE`) Access Violation occurs.

* deleting the compilation word-list ({std 15.6.2.1580} FORGET);

* fewer than u+1 items on control-flow stack ({std 15.6.2.1015} CSPICK, {std 15.6.2.1020} CSROLL);

* name can't be found ({std 15.6.2.1580} FORGET);

* name not defined via {std 6.1.1000} CREATE ({std 15.6.2.0470} ;CODE);

* {std 6.1.2033} POSTPONE applied to {std 15.6.2.2532} [IF];

* reaching the end of the input source before matching {std 15.6.2.2531} [ELSE] or {std 15.6.2.2533} [THEN] ({std 15.6.2.2532} [IF]);

* removing a needed definition ({std 15.6.2.1580} FORGET).

* changing the compilation word list ({std 16.3.3} Finding definition names);

* search order empty ({std 16.6.2.2037} PREVIOUS);

* too many word lists in search order ({std 16.6.2.0715} ALSO).


----
<a id="other"/>
###[Other system documentation](#other)

* list of non-standard words using {std 6.2.2000} PAD ({std 3.3.3.6} Other transient regions); 

* operator's terminal facilities available; 

* program data space available, in address units; 

* return stack space available, in cells; 

* stack space available, in cells; 

* system dictionary space required, in address units. 
