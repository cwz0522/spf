\ Smal32 assembler extension
\ Writen by Matway Burkov

REQUIRE Code ~mak\asm\ASM.FRT

Code ExBytes
    XCHG AL, AH
    RET
EndCode

: ExWords 
    DUP  16 RSHIFT 
    SWAP 16 LSHIFT OR ; 

BASE @ HEX
ALSO HIDDEN DEFINITIONS

: ?OP   ( --> F )
IN>R GetOp NIP 0 <> R>IN ;

: M(?PTR)
IN>R GetOp 3 = IF
C" TBYTE" S= 0A ?S=
C" QWORD" S=  8 ?S=
C" DWORD" S=  4 ?S=
C" WORD"  S=  2 ?S=
C" BYTE"  S=  1 ?S=
THEN DROP 0 R>IN ;
' M(?PTR) TO (?Ptr)

: ?ST   ( --> N -1 | 0 )
IN>R GetOp 3 = IF
C" ST" S= 0= IF RDROP IN>R
GetOp 1 = SWAP 28 = AND IF
GetOp 2 <> IF 61 THROW THEN
DUP 7 U> IF 5A THROW THEN
GetOp 1 = SWAP 29 = AND 0= IF 59 THROW THEN
RDROP ELSE 0 R>IN THEN
-1 EXIT THEN ELSE DROP THEN
0 R>IN ;

: ?COMMA ( --> F )
IN>R GetOp 1 = IF [CHAR] , = RDROP
ELSE DROP 0 R>IN THEN ;

: 1Op3
CREATE DUP ExWords C, ExBytes W, DOES> DUP W@ W, 2+ C@ C, ;

: 1Op4
CREATE ExBytes ExWords ExBytes , DOES> @ , ;

: COMREG!  ( W --> )
( DUP 7 AND TO *R/M ) 3 RSHIFT
  DUP 7 AND TO *Reg   3 RSHIFT
( DUP 3 AND TO *Mod ) 2 RSHIFT
TO *OpCode ;

: FLOAT ( OP0 OP1W OP1D OP1Q OP1T OP1S --> )
CREATE 7 ROLL ExBytes W, 6 ROLL W, 5 ROLL W, 4 ROLL W, 3 ROLL W, ROT C, SWAP W, W, DOES>
InitCommand 1 TO *OpcSize
?OP 0= IF W@ ?DUP IF W, EXIT ELSE 66 THROW THEN THEN 2+
?MemReg IF *Mod 3 = IF DROP 56 THROW THEN -1 TO *Reg
*OpSize  2 = IF DUP W@ ?DUP IF COMREG! THEN THEN 2+
*OpSize  4 = IF DUP W@ ?DUP IF COMREG! THEN THEN 2+
*OpSize  8 = IF DUP W@ ?DUP IF COMREG! THEN THEN 2+
*OpSize 0A = IF DUP W@ ?DUP IF COMREG! THEN THEN 2+
DROP *Reg -1 = IF 50 THROW THEN
0 TO *OpSize CompileCommand
ELSE 8 + DUP 1+ SWAP C@
?DUP 0= IF 5E THROW ELSE 3 TO *Mod
SWAP ?ST 0= IF 2DROP 5E THROW ELSE DUP IF SWAP 2+ SWAP THEN TO *R/M THEN
W@ COMREG!
DUP 3 = IF ?COMMA IF ?ST 0= IF DROP 66 THROW ELSE IF DROP 5E THROW THEN THEN THEN THEN
2 = IF Comma ?ST 0= IF 66 THROW ELSE *R/M IF IF 5E THROW THEN ELSE TO *R/M THEN THEN THEN
CompileCommand
THEN THEN ;

: MOP1
CREATE W, DOES>
InitCommand 1 TO *OpcSize W@ COMREG!
?OP 0= IF 66 THROW THEN
?MemReg *Mod 3 <> AND IF
0 TO *OpSize CompileCommand
ELSE 5E THROW THEN ;

: MOP2
CREATE DUP ExWords C, W, DOES> DUP C@ C, 1+
InitCommand 1 TO *OpcSize W@ COMREG!
?OP 0= IF 66 THROW THEN
?MemReg *Mod 3 <> AND IF
0 TO *OpSize CompileCommand
ELSE 5E THROW THEN ;

ALSO S_ASSEM DEFINITIONS

\ FPU opcodes
: FNSTSW
InitCommand 1 TO *OpcSize
?OP 0= IF 66 THROW THEN
?MemReg IF *OpSize 2 <> IF 50 THROW THEN
*Mod 3 = IF *R/M IF 5E THROW ELSE 0DF C, 0E0 C, THEN ELSE
0DD TO *OpCode 7 TO *Reg
0 TO *OpSize CompileCommand
THEN ELSE 5E THROW THEN ;

  09B   1Op1 FWAIT
  0D9D0 1Op2 FNOP
  0D9E0 1Op2 FCHS
  0D9E1 1Op2 FABS
  0D9E4 1Op2 FTST
  0D9E5 1Op2 FXAM
  0D9E8 1Op2 FLD1
  0D9E9 1Op2 FLDL2T
  0D9EA 1Op2 FLDL2E
  0D9EB 1Op2 FLDPI
  0D9EC 1Op2 FLDLG2
  0D9ED 1Op2 FLDLN2
  0D9EE 1Op2 FLDZ
  0D9F0 1Op2 F2XM1
  0D9F1 1Op2 FYL2X
  0D9F2 1Op2 FPTAN
  0D9F3 1Op2 FPATAN
  0D9F4 1Op2 FXTRACT
  0D9F5 1Op2 FPREM1
  0D9F6 1Op2 FDECSTP
  0D9F7 1Op2 FINCSTP
  0D9F8 1Op2 FPREM
  0D9F9 1Op2 FYL2XP1
  0D9FA 1Op2 FSQRT
  0D9FB 1Op2 FSINCOS
  0D9FC 1Op2 FRNDINT
  0D9FD 1Op2 FSCALE
  0D9FE 1Op2 FSIN
  0D9FF 1Op2 FCOS
  0DAE9 1Op2 FUCOMPP
  0DBE0 1Op2 FNENI
09BDBE0 1Op3 FENI
  0DBE1 1Op2 FNDISI
09BDBE1 1Op3 FDISI
  0DBE2 1Op2 FNCLEX
09BDBE2 1Op3 FCLEX
  0DBE3 1Op2 FNINIT
09BDBE3 1Op3 FINIT
09BDBE4 1Op3 FSETPM
0DEC1     0 0D800 0DC00     0 2 0D8C0 0DCC0 FLOAT FADD
0DEC9     0 0D808 0DC08     0 2 0D8C8 0DCC8 FLOAT FMUL
0D8D1     0 0D810 0DC10     0 1 0D8D0 0D8D0 FLOAT FCOM
0D8D9     0 0D818 0DC18     0 1 0D8D8 0D8D8 FLOAT FCOMP
0DEE9     0 0D820 0DC20     0 2 0D8E0 0DCE8 FLOAT FSUB
0DEE1     0 0D828 0DC28     0 2 0D8E8 0DCE0 FLOAT FSUBR
0DEF9     0 0D830 0DC30     0 2 0D8F0 0DCF8 FLOAT FDIV
0DEF1     0 0D838 0DC38     0 2 0D8F8 0DCF0 FLOAT FDIVR
0DEC1     0     0     0     0 3 0DEC0 0DEC0 FLOAT FADDP
0DEC9     0     0     0     0 3 0DEC8 0DEC8 FLOAT FMULP
0DED9     0     0     0     0 3 0DED8 0DED8 FLOAT FCOMPP
0DEE9     0     0     0     0 3 0DEE8 0DEE8 FLOAT FSUBP
0DEE1     0     0     0     0 3 0DEE0 0DEE0 FLOAT FSUBRP
0DEF9     0     0     0     0 3 0DEF8 0DEF8 FLOAT FDIVP
0DEF1     0     0     0     0 3 0DEF0 0DEF0 FLOAT FDIVRP
    0 0DE00 0DA00     0     0 0     0     0 FLOAT FIADD
    0 0DE08 0DA08     0     0 0     0     0 FLOAT FIMUL
    0 0DE10 0DA10     0     0 0     0     0 FLOAT FICOM
    0 0DE18 0DA18     0     0 0     0     0 FLOAT FICOMP
    0 0DE20 0DA20     0     0 0     0     0 FLOAT FISUB
    0 0DE28 0DA28     0     0 0     0     0 FLOAT FISUBR
    0 0DE30 0DA30     0     0 0     0     0 FLOAT FIDIV
    0 0DE38 0DA38     0     0 0     0     0 FLOAT FIDIVR
    0 0DF00 0DB00 0DF28     0 0     0     0 FLOAT FILD
    0 0DF18 0DB18 0DF38     0 0     0     0 FLOAT FISTP
    0 0DF10 0DB10     0     0 0     0     0 FLOAT FIST
0D9C1     0 0D900 0DD00 0DB28 1 0D9C0 0D9C0 FLOAT FLD
0DDD9     0 0D918 0DD18 0DB38 1 0DDD8 0DDD8 FLOAT FSTP
0DDD1     0 0D910 0DD10     0 1 0DDD0 0DDD0 FLOAT FST
0D9C9     0     0     0     0 1 0D9C8 0D9C8 FLOAT FXCH
0DDC1     0     0     0     0 1 0DDC0 0DDC0 FLOAT FFREE
0DDE1     0     0     0     0 1 0DDE0 0DDE0 FLOAT FUCOM
0DDE9     0     0     0     0 1 0DDE8 0DDE8 FLOAT FUCOMP
    0     0     0     0 0DF20 0     0     0 FLOAT FBLD
    0     0     0     0 0DF30 0     0     0 FLOAT FBSTP
  0D920 MOP1 FLDENV
  0D928 MOP1 FLDCW
  0D930 MOP1 FNSTENV
09BD930 MOP2 FSTENV
  0D938 MOP1 FNSTCW
09BD938 MOP2 FSTCW
  0DD20 MOP1 FRSTOR
  0DD33 MOP1 FNSAVE
09BDD33 MOP2 FSAVE

\ Several CPU opcodes
: ENTER ( --> )
   2 TO *OpSize Imm *ImSize 4 = IF 0x5A THROW THEN *Imm >R
   Comma 1 TO *OpSize Imm *ImSize 1 > *Imm 31 U> OR IF 0x5A THROW THEN
   0xC8 C, R> W, *Imm C,
;
0 [IF]
: ENTER
?OP 0= IF 66 THROW THEN
?NUMBER 0= IF 5E THROW THEN
DUP 0FFFF U> IF DROP 5A THROW THEN
COMMA
?OP 0= IF DROP 66 THROW THEN
?NUMBER 0= IF DROP 5E THROW THEN
DUP 0FF U> IF 2DROP 5A THROW THEN
0C8 C, SWAP ExBytes W, C, ;
[THEN]

  0F31 1Op2 RDTSC  \ Read From Time Stamp Counter (
  0FA2 1Op2 CPUID  \ CPU Identification
 0D6   1Op1 SETALC \ Set AL to Carry Flag
\ IA MMX
  0F77 1Op2 EMMS   \ Empty MMX state

PREVIOUS
PREVIOUS DEFINITIONS

BASE !
