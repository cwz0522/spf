\ 6-07-02            Описание устройств, структур и масок
\ 11-11-2006  этот файл сохранился со времен СМАЛ32 и
\             справедлив для библиотечки на СПФ
──────────────────────────────────────────────────────────────────────────────
Слова Unit: Funct: и Struct по сути почти идентичны, так что описание:

      Unit: 82C54
            F: firstchanel 0+ ;F
 и
    0 Struct 82C54
             Byte[] firstChanel
 и
    0 Funct: 82C54
         0 3 enum chanel
идентичны. Разница между ними заключается в "оттенках действий",
то есть лишь предназначением и обычным поведением.
──────────────────────────────────────────────────────────────────────────────
Слово Verb: делает последнее определенное слово (должно быть определено
через : ) способным скомпилировать полученное на стеке число в текущее
определение(либо просто оставить его на стеке, если находимя с режиме
исполнения) и как в случае с F: выйти из вложенных словарей.
Пример:

0 Funct: Proba{
         : qqq 3+ ;
     3 7 enum www
       0 bit eee
         : } ; Verb:
   Funct;
и
  Proba{ qqq eee } даст 3, а
  Proba{ eee qqq } даст 4 :)
можно и так:
0 Funct: Proba{
     3 7 enum www
       0 bit eee
         : 3+ } ; Verb:
   Funct;
тогда
  Proba{ eee } даст 4
  Proba{ }     даст 3

Verb: можно использовать как внутри Struct, так и с Unit:.
──────────────────────────────────────────────────────────────────────────────
Описание структуры начинается со смещения, которое может быть отрицательным
то есть: -5 Struct Proba и заканчивается словом EndStruct. Для удобства и
наглядности описания сткуктуры используются описатели полей:
Zero[] - для поля нулевой длинны
Byte[] - для поля длинной в байт
Char[] - для поля, длинной в символ
Word[] - для поля длинной в два байта
Cell[] - для ячейки
Record - для поля произвольной длинны

При закрытии структуры словом EndStruct создается константа с именем /size
хранящая размер структуры, которая корректно работает в случае с отрица-
тельными структурами. Пример:

  -4                    \ начальное смещение структуры
     Struct: Block       \ создает словарь с именем Block, делает его текущим
       Cell[] Size      \ описатель поля для длинны блока
       Zero[] >Body     \ смещение в начало блока
       Cell[] fLink     \ ссылка для случая с пустым блоком
     EndStruct

Таким образом в словаре Block будет создано 4 слова: Size >Body fLink /size.

Работать с полями такой структуры можно при любом состоянии State.

: Proba Block Size . ;

0 Proba .

0 Block Size .
──────────────────────────────────────────────────────────────────────────────
Описание Funct: начинается маски для тех бит, что должны быть установлены.
Пример:

      C0 Funct: Proba{    \ создали словарь
          0 Bit Decimal   \ установить бит
          0 -Bit Binary   \ сбросить бит
         0A Mask Set      \ установить маску
        4 3 Enum Chanel   \ перечисление в поле в 2 бита со смещением от
                          \ начала на 4 бита
          : } ; Verb:     \ закрывает описатель
      EndFunct

Использование:
       Proba{           \ --> C0
              Decimal   \ --> C1
              Set       \ --> CB
           1 Chanel     \ --> BB
            }
результирующая маска окажется = ВВ
Слова между Proba{ и } всегда выполняются в State = 0, то есть с получаемым
числом можно производить и другие действия, например что-нить прибавлять.
В определение компилируется только полученная константа.
──────────────────────────────────────────────────────────────────────────────
Со слов  Unit: Name  начинается описание устройства с именем Name. Слово
Unit: создает словарь с именем name делает его контекстным и текущим.
Все определенные до Unit; слова окажутся в этоом словаре.

──────────────────────────────────────────────────────────────────────────────
Слово Sub предназначено для создания "иерархии" словарей и сообщает
словам типа F:, Verb: о колличестве необходимых Previous.
Всякий раз при пропуске Sub слова F: начинают с одного Previous.
Таким образом можно упрятывать ненужные слова достаточно далеко:

Unit: Steppers
  Sub Unit: Azimuth
       F: Steps ( vect ) .. ;F
      Unit;
  Sub Unit: Altitude
       F: Steps ( vect ) .. ;F
      Unit;

   Unit: Go
       F: Left .. ;F
       F: Right .. ;F
       F: Up ..   ;F
       F: Down ... ;F
   Unit;
Unit;
 И использовать, например, таким образом:

10 Steppers Go Right Azimuth Steps

то есть Right выйдет только из словаря Go,
а Steps покинет и Azimuth и Steppers,
причем в коде это будет выглядеть так:
    Lit 10 (Right) (Steps)

──────────────────────────────────────────────────────────────────────────────

Слова: F: и ;F создают сразу два слова в словаре. Причем одно скрытое -
в котором хранится часть после F: и одно с указанным именем - слово
немедленного исполнения, компилирующее(либо исполняющее) первое(скрытое).
Этоти слова позволяет управлять словарями, то есть делать нужное кол-во
previous автоматически выходя из вложенных(по Sub) словарей. Например:
Unit: Proba               \ если слово будет тут - 1 previous
      Sub Unit: hello     \                        здесь уже два
          Sub Unit: world \                        тут три
и так далее.
──────────────────────────────────────────────────────────────────────────────

