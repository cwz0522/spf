<?xml version="1.0" encoding="ASCII"?>
<forth xmlns="http://forth.org.ru/ForthML/"
     xmlns:r="http://forth.org.ru/ForthML/Rules/"
>
<!-- Aug.2008 ruv -->
<!-- $Id$ -->

<comment>
  Sedna Client/Server Protocol
  http://www.sedna.org/serverprotocol/ClientServerProtocol.html

  http://modis.ispras.ru/src/sedna/driver/scheme/sedna-api/sedna-api.scm
  http://sedna.org/gitweb/sedna.git/blob/HEAD:/driver/scheme/sedna-api/sedna-api.scm
</comment>  


<comment>
 Now it requires CROP  (see ~pinka/samples/2005/lib/split.f)
</comment>

<using href="http://forth.org.ru/~pinka/model/dbms/sedna-common.f.xml"/>

<wordlist name="sedna-hidden">

<alias name="packet" word="packet"/>

<slot> buf  sock port-number t </slot>
<slot2> database user password  hostname port </slot2>

<slot2> request last-part xml-stylesheet </slot2>
<slot> output-format consumer-xt consumer-orig-xt </slot>
<comment> format code is 0 - to get result in XML </comment>


<slot>  data-emitter error-code </slot>
<slot2> data-chunk   error-info </slot2>


<def name="close-sock" ds=" -- ">
  sock DUP <if> 0 sock! CloseSocket THROW <exit/></if> DROP
</def>

<const name="sedna-events">1</const><rem> boundary for WordByAddr </rem>
<handler event="startup"> max-packet-size ALLOCATE THROW buf!  0 output-format! </handler>
<handler event="shutdown"> buf FREE-FORCE 0 buf!  close-sock </handler>
<handler event="recovery"> 0 buf! 0 sock! 0 output-format! </handler>


<def name="command" ds=" -- n "><rem> or 'instruction' or 'code' </rem>
  buf T@
</def>
<def name="len" ds=" -- u ">
  buf T+ T@
</def>
<def name="body" ds=" -- a u ">
  buf T+ DUP T+ SWAP T@
</def>
<def name="read-exact" ds=" addr u -- ">
  sock READ-SOCK-EXACT THROW
</def>
<def name="get-head" ds=" -- ">
  buf 2 Ts read-exact
  buf DUP localize  T+ localize
</def>
<def name="get-packet" ds=" -- ">
  get-head  body  DUP max-body-size UGT <unless> read-exact <exit/></unless>
  `#sedna-body-size-too-long STHROW
</def>
<def name="put" ds=" a u -- ">
  DUP <if> sock WriteSocket THROW <exit/></if> 2DROP
</def>

<def name="body-code" ds=" -- x ">
  body <if> sednaT@ <exit/></if> DROP 0
</def>
<def name="body-info" ds=" -- a u ">
  body  1 Ts UGT <unless> 0 <exit/></unless>
  T+ sednaS@
</def>
<def name="body-text" ds=" -- a u ">
  body <unless> 0 <exit/></unless>
  sednaS@
</def>


<wordlist name="commands-handler" />

<def name="dispatch-command" ds=" -- ">
  command
    BASE @ >R DECIMAL  NtoS  R> BASE !
  <rem> 2DUP TYPE CR </rem>
  commands-handler OBEY <if><exit/></if>
  close-sock
  `#sedna-command-not-found STHROW
</def>
<def name="next" ds=" -- "><rem> need a tail call optimization for this </rem>
  get-packet dispatch-command
</def>

<def name="close-sedna" ds=" -- ">
  packet::CloseConnection put next
</def>

<export>

<def name="assume-cred" ds=" d-user d-password d-db d-host d-port -- ">
  port! hostname! database! password! user!
  port StoN port-number!
  
  <rem>What if the current BASE will not a DECIMAL? (!!!)</rem>
</def>

<def name="close" ds=" -- ">
  sock <unless><exit/></unless>
  'close-sedna CATCH <choose>
    DUP -1002 = <when> DROP 0 </when>
    DUP 10053 = <when> DROP 0 </when>
  </choose><rem>( ior )</rem>
    close-sock
  THROW
</def>

<def name="open" ds=" -- ">
  close
  0 t! <rem> reset in-transaction flag </rem>
  hostname port-number ConnectHost THROW sock!
  packet::Start-Up put next
</def>

</export>

<def name="reopen" ds=" -- ">
  close-sock 'open CATCH  sock <if> THROW <exit/></if>
  <rem>( ior )</rem>
  `#sedna-connection-refused STHROW
</def>

<include href="sedna-messages.f.xml"/>

<def name="put-query-parts" ds=" addr u -- "><!-- see:  sedna:write-query-out -->
  DUP max-query-size UGT <unless> request! client-message::ExecuteLong put <exit/></unless>
  SWAP max-query-size  2DUP request!  + SWAP max-query-size -
  client-message::ExecuteLong put
  <again/>
</def>

<def name="put-query" ds=" addr u -- "><!-- see:  sedna:write-query-out -->
  DUP max-query-size UGT <unless> request! client-message::Execute put <exit/></unless>
  put-query-parts
  packet::LongQueryEnd put
</def>

<def name="per-put-query" ds=" emitter-xt -- ">
  >R <repeat> R@ EXECUTE <rem>( a u )</rem>
  DUP <while/> put-query-parts </repeat> 2DROP RDROP
  packet::LongQueryEnd put
</def>

<def name="consumer1" ds=" a u -- ">
  consumer-orig-xt consumer-xt!
  xml-stylesheet DROP <if>
    xml-stylesheet
    sedna-messages-hidden::DATASPACE <rem> using as buf; it is safe since data already sent </rem>
    composed-stylesheet-declaration
    consumer-xt EXECUTE
  </if>
  consumer-xt EXECUTE
</def>

<export>

<def name="set-xml-stylesheet" ds=" d-url -- ">
  <comment> It should be set on each query. 
    Note d-url is passing by ref (without a copy of data). 
  </comment>
  xml-stylesheet! 
</def>

</export>


<def name="(transact)" ds=" -- ">
  packet::BeginTransaction    put next
  t 1+ t!
</def>
<comment>
  The transactions within a session are strictly serial, that is one transaction ends 
  before next one starts, there is only one active transaction per session. 
  -- http://www.modis.ispras.ru/sedna/adminguide/AdminGuidese1.html
</comment>

<export>

<def name="transact" ds=" -- ">
  t <if> t 1+ t! <exit/></if>
  <rem> don't try reopen-session logic if transaction had been already open </rem>
  sock <unless> reopen </unless>
  '(transact) CATCH <choose>
    DUP 0 EQ     <when> DROP <exit/></when>
    DUP -1002 <rem> end of stream     </rem> EQ <when/>
    DUP 10053 <rem> WSAECONNABORTED   </rem> EQ <when/>
    DUP 10054 <rem> WSAECONNRESET     </rem> EQ <when/>
              <rem> what about 10038 WSAENOTSOCK?</rem>
    THROW <exit/>
  </choose> DROP
  300 PAUSE <rem> before next following reconnection </rem>
  <!--
  <log>sedna, reopen connection</log>
  -->
  reopen (transact)
</def>

<def name="commit"   ds=" -- ">  t 1- DUP 0 MAX t! <if><exit/></if> packet::CommitTransaction   put next </def>
<def name="rollback" ds=" -- ">  t 1- DUP 0 MAX t! <if><exit/></if> packet::RollbackTransaction put next </def>
<rem> '0 MAX' for out-of-band rollback </rem>


<def name="within-transaction" ds=" i*x xt -- j*x ">
  transact
    CATCH
      0. xml-stylesheet!
    DUP <if>
      <rem> state of dialog is unknown here, so ... </rem>
      close-sock
      <rem> server will make rollback automatically </rem>
      t 1- t!
      THROW 
    </if> DROP
    <rem> 't' state should be balanced </rem>
  commit
</def>

<def name="(per-query-per)" ds=" i*x putter-xt consumer-xt -- j*x ">
  <!-- see: sedna-api.scm # sedna:execute-query-xml -->
  consumer-orig-xt! 'consumer1 consumer-xt!
    <rem>( putter )</rem>
  within-transaction
</def>

<def name="query-per" ds=" d-query consumer-xt -- "><!-- see: sedna-api.scm # sedna:execute-query-xml -->
  <q> put-query next </q> SWAP (per-query-per)
</def>

<def name="query-per-" ds=" consumer-xt d-query -- ">
  ROT query-per
</def>

<def name="query-value" ds=" d-query -- d-value ">
  0. last-part! <rem> result may be empty </rem>
  <q> OVER <if> last-part! <exit/></if> 2DROP </q>
  query-per last-part
</def>

<def name="query" ds=" d-query -- ">
  '2DROP query-per
</def>

<def name="per-query-per" ds=" emitter-xt consumer-xt -- ">
  <q> per-put-query next </q> SWAP (per-query-per)
</def>

<def name="(load-doc)" ds=" d-docname -- ">
  <q> client-message::load-doc-stream put next </q> within-transaction
</def>
<def name="(load-doc-coll)" ds=" d-docname -- ">
  <q> client-message::load-doc-coll-stream put next </q> within-transaction
</def>

<def name="per-load-doc" ds=" d-docname emitter-xt -- ">
  data-emitter! (load-doc)
</def>
<def name="per-load-doc-coll" ds=" d-docname d-coll emitter-xt -- ">
  data-emitter! (load-doc-coll)
</def>
<def name="load-doc" ds=" d-content d-docname -- ">
  2SWAP set-bulk-data
  (load-doc)
</def>
<def name="load-doc-coll" ds=" d-content d-docname d-coll -- ">
  2>R 2SWAP set-bulk-data 2R>
  (load-doc-coll)
</def>

</export>
</wordlist>

</forth>
