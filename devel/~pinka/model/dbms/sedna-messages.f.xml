<?xml version="1.0" encoding="ASCII"?>
<forth xmlns="http://forth.org.ru/ForthML/"
     xmlns:r="http://forth.org.ru/ForthML/Rules/"
>
<!-- Aug.2008 ruv -->

<wordlist name="sedna-messages-hidden">

<include href="http://forth.org.ru/~pinka/model/data/data-space.f.xml"/>

<const name="sedna-messages-events">1</const><rem> boundary for WordByAddr </rem>
<handler event="recovery"> 0. DATASPACE!  </handler>
<handler event="startup">  max-packet-size ALLOCATED DATASPACE! </handler>
<handler event="shutdown"> DATASPACE DROP FREE THROW 0. DATASPACE! </handler>

<def name="sednaT," ds=" x -- ">   reorder-bytes T, </def>
<def name="sednaS," ds=" a u -- "> 0 B, DUP sednaT, S, </def>

<def name="message" ds=" xt-body-composer command -- a u ">
  CLEAR-DATASPACE HERE >R
  sednaT,       <rem> command </rem>
  HERE >R 0 T,  <rem> length </rem>
  HERE >R       <rem> begin of the body </rem>
  EXECUTE
  HERE DUP R> - R> sednaT!  <rem> adjust length </rem>
  R> TUCK -
</def>

<def name="string," ds=" xt-content-composer -- ">
  <rem> xt ( -- ) </rem>
  0 0 sednaS, HERE >R
  EXECUTE     HERE R@ - R> 1 Ts - sednaT! <rem> fix length </rem>
</def>

<def name="message-exec" ds=" xt-content-composer -- a u ">
<q>
  output-format B, 
  string,
</q> 300 message <rem> see Execute </rem>
</def>

<export><rem> the local dataspace lexicon is in scope here </rem>

<wordlist name="client-message">

<def name="SessionParameters" ds=" -- a u ">
<q>
  version-major B,
  version-minor B,
  user      sednaS,
  database  sednaS,
</q> 120 message
</def>

<def name="AuthenticationParameters" ds=" -- a u ">
<q>
  password sednaS,
</q> 130 message
</def>

<def name="Execute" ds=" -- a u ">
<q>
  output-format B, 
  request sednaS,
</q> 300 message
</def>

<def name="ExecuteLong" ds=" -- a u ">
<q>
  output-format B, 
  request sednaS,
</q> 301 message
</def>

<def name="BulkLoadError" ds=" -- a u ">
<q>
  error-code sednaT,
  error-info sednaS,
</q> 400 message
</def>

<def name="BulkLoadPortion" ds=" -- a u ">
<rem> xt ( addr u1 -- addr u2 ) </rem>
<q>
  <q> HERE max-query-size data-emitter EXECUTE 
    DUP ALLOT data-chunk!
  </q> string,
</q> 410 message
</def>


<def name="cmd-load-doc," ds=" d-docname -- ">
  <text>LOAD STDIN "</text> S, S, `" S,
</def>
<def name="cmd-load-doc-coll," ds=" d-docname d-collname -- ">
  2SWAP cmd-load-doc,
  <text> "</text> S, S, `" S,
</def>

<def name="load-doc-stream" ds=" d-docname -- a u ">
  <q> cmd-load-doc, </q> message-exec
</def>
<def name="load-doc-coll-stream" ds=" d-docname d-collname -- a u ">
  <q> cmd-load-doc-coll, </q> message-exec
</def>


  <rem> client-message </rem>
</wordlist>

</export><rem> local dataspace from sedna-messages-hidden </rem>

  <rem> sedna-messages-hidden </rem>
</wordlist>

<slot> hfile </slot>
<slot2> data-content </slot2>

<def name="set-bulk-data" ds=" addr u -- ">
  data-content!
  <q ds="a1 u1 -- a1 u2">
    data-content SEATED-
    DUP >R data-content
    SWAP R@ + SWAP R> - data-content!
  </q> data-emitter!
</def>

<def name="send-stream-content" ds=" -- ">
  <q>
    <repeat>
      client-message::BulkLoadPortion
      data-chunk NIP <while/> put
    </repeat> 2DROP
  </q> CATCH DUP error-code! 0EQ <if>
    packet::BulkLoadEnd put
    <exit/>
  </if>
  0. error-info!
  client-message::BulkLoadError put
</def>

<def name="send-filename-content" ds=" d-txt-filename -- ">
  2DUP + 0 SWAP C! <rem> it is safely here </rem>
  R/O OPEN-FILE-SHARED DUP error-code! <if> DROP
    0. error-info!
    client-message::BulkLoadError put
    <exit/>
  </if>
  hfile!
  <q ds="a1 u1 -- a1 u2">
    hfile READOUT-FILE THROW 
  </q> data-emitter!
  'send-stream-content CATCH
  hfile 0 hfile! CLOSE-FILE SWAP THROW THROW
</def>



<def name="throw-error" ds=" -- ">
  body-info STHROW
</def>

<develop wordlist="commands-handler">

<comment>
  http://www.sedna.org/serverprotocol/ClientServerProtocolse4.html#x13-150004
</comment>

<text>
  510   160 230 250 255     340 440
</text><each-word><alias name="{}" word="NOOP"/></each-word>
<text>
        170 240 260 265 330 350 450
</text><each-word><alias name="{}" word="throw-error"/></each-word>
<rem> -- Many of this error-messages are not used by server in real. </rem>


<def name="520" alias="TransactionRollbackBeforeClose">
  <text>SEDNA TransactionRollbackBeforeClose</text> STHROW
  <rem> An exception is just for info.
    Situation occurs "if the client sends the se_CloseConnection message
    before committing the on-going transaction". 
    Connection is closed by server.
  </rem>
</def>

<def name="100" alias="ErrorResponse">
  <rem>
    Transaction is rolled back.
    Connection must be closed by server after following errors:
      SE3053 SE3006 SE3007 SE3009 SE3012
    -- tr.cpp # client->error 
  </rem>
  0 t! <rem> no transaction </rem>
  throw-error <rem> propagate exception </rem>
</def>


<def name="140" alias="SendSessionParameters">
  client-message::SessionParameters put next
</def>
<def name="150" alias="SendAuthParameters">
  client-message::AuthenticationParameters put next
</def>

<g><comment> see: sedna-api.scm # sedna:get-next-xml-item </comment>
<def name="320" alias="QuerySucceeded"> next </def>
<def name="360" alias="ItemPart"> body-text consumer-xt EXECUTE  next </def>
<def name="370" alias="ItemEnd"> packet::GetNextItem put next </def>
<def name="375" alias="ResultEnd"> 0. consumer-xt EXECUTE </def>
</g>

<def name="325" alias="DebugInfo"> body-info TYPE CR  next </def>

<def name="430" alias="BulkLoadFileName">
  body-text <rem> filename </rem>
  send-filename-content next
</def>

<def name="431" alias="BulkLoadFromStream">
  send-stream-content next
</def>

</develop>


</forth>
