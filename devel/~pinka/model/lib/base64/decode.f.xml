<?xml version="1.0" encoding="UTF-8"?>
<forth xmlns="http://forth.org.ru/ForthML/">

<comment>
  Implementation of BASE64 decoder for MIME.

  Limitations:
    Characters outside alphabet (including line separators) are discarded at block boundaries only.
    Padding is mandatory (and is allowed in the last block only), pad char is '='
  Alphabet:
    ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/


  Other (and shorter) variants:
    ~ac/lib/string/CONV.F
    ~nn/lib/base64.f
  (although, about 20 times slower)
</comment>



<wordlist name="BASE64-DECODER">

<const name="/CHARMAP"> 128 </const>

<const name="CHARMAP">
  ALIGN HERE /CHARMAP ALLOT 0 C, DUP /CHARMAP -1 FILL
</const><init>
  `ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/
  0 -ROT <times ds=" code addr "> 2DUP B@ CHARMAP + B! SWAP 1+ SWAP 1+ </times> 2DROP
  0 <char>=</char> CHARMAP + B!
</init>

<def name="CHAR-CODE" ds=" char -- code flag ">
  DUP /CHARMAP ULT <if> CHARMAP + B@ DUP 0xC0 AND 0EQ <exit/></if> FALSE
</def>

<def name="CONVERT-CODE-4-3" ds=" bs4 bs3 bs2 bs1 -- bt3 bt2 bt1 ">
  6 LSHIFT OR
  6 LSHIFT OR
  6 LSHIFT OR
  DUP 0xFF AND SWAP 8 RSHIFT
  DUP 0xFF AND SWAP 8 RSHIFT
</def>

<def name="DECODE-BLOCK" ds=" a-src1 a-dst1 -- a-src2 a-dst2 ">
  >R
  <rem> if the first char is outside of alphabet then outgoing block is empty </rem>
  DUP B@ CHAR-CODE <unless> DROP 1+ R> <exit/></unless> >R 1+
  DUP B@ CHAR-CODE <if> >R 1+
  DUP B@ CHAR-CODE <if> >R 1+
  DUP B@ CHAR-CODE <if> >R 1+
  R> R> R> R>
  <rem ds=" a-src2  bs4 bs3 bs2 bs1 " rs=" a-dst1 "/>
  CONVERT-CODE-4-3 <rem> inlining here gives about +6% in performance </rem>
  R>
  TUCK B! 1+
  TUCK B! 1+
  TUCK B! 1+
  <exit/>
  </if></if></if> -6021 THROW <rem> unsupported or bad format </rem>
</def>

<def name="DECODE-BLOCKS-FENCED" ds=" a-src-fence a-src1 a-dst1 -- a-src-fence a-src2 a-dst2 ">
  <rem> a-src-fence is the fence for a block head </rem>
  <repeat> >R 2DUP UGT <while/> R> DECODE-BLOCK </repeat> R>
</def>

<def name="(TRIM-TAIL)" ds=" addr addr9 -- addr addr8 ">
  <until> 2DUP EQ <if-exit/> 1- DUP B@ 0x21 ULT 0EQ </until> 1+
</def>



<export>

<def name="BID-BASE64-DECODING" ds=" u1 -- u2 ">
  4 U/ 3 *
</def>

<def name="DECODE-BASE64" ds=" a-src u-src a-buf u-buf -- a-buf u ">
  2 PICK BID-BASE64-DECODING ULT <if> -6011 THROW <rem> too small buffer</rem></if>
  >R OVER + (TRIM-TAIL) 2DUP EQ <if> 2DROP R> 0 <exit/></if><rem> no data </rem>
  <rem ds=" a-src a-src9 " rs=" a-buf "/>
  3 - SWAP R@ DECODE-BLOCKS-FENCED
  <rem ds=" a-src-fence a-src2 a-dst2 " rs=" a-buf "/>
  NIP R> TUCK - ROT
  <rem ds=" a-buf u2 a-src-fence "/>
  1+ DUP B@ <char>=</char> NE <if> DROP <exit/></if>
  1+     B@ <char>=</char> NE <if> 1-   <exit/></if>
                                   2-
</def>

</export>
</wordlist>


<alias name="DEBASE64" word="DECODE-BASE64" />

</forth>
