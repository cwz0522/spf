<?xml version="1.0" encoding="ASCII"?>
<forth xmlns="http://forth.org.ru/ForthML/">
<!-- Nov.2006, Jan.2007  ruvim@forth.org.ru -->

<!-- Note
  The stack notation (signature) of the words FIND-NODE and FIND-LIST 
  differ from the signature of the same words in the ~pinka/samples/2006/lib/plain-list.f

  Which is better? It is a question.
-->

<comment> node format is:
  | link-to-next-node-data |^ node-data ... |
</comment>
<!--
<def name="CAR" > @ </def> -->
<def name="CDR" ds=" node1 - node|0 "> CELL- @ </def>

<def name="CONCATED" ds=" node2 node1 -- node2 ">
  OVER CELL- !
</def>
<def name="CONCATED-" ds=" node1 node2 -- node2 ">
  TUCK CELL- !
</def>

<def name="BIND-NODE" ds=" node list -- ">
  2DUP @ <!-- ( node list node node-o ) -->
  SWAP CELL- ! !
</def>
<def name="UNBIND-NODE" ds=" list -- node ">
  DUP @ DUP 0= <if> NIP <exit/></if>  <!-- ( list node ) -->
  TUCK CELL- @ SWAP !
</def>
<def name="CDR-BY-VALUE" ds=" x node1 -- x node2|0 ">
  <repeat> DUP <while/> 2DUP @ NEQ <while/> CELL- @ </repeat>
</def>
<def name="FOREACH-NODE" ds=" xt node -- "><rem> xt ( node-i -- ) </rem>
    <repeat> DUP <while/> 2DUP 2>R SWAP EXECUTE 2R> CELL- @ </repeat> 2DROP
</def>
<def name="REVERSE-NODE" ds=" node1 -- node2 ">
  0 SWAP <repeat> DUP <while ds=" prev next" /> TUCK CELL- DUP @ -ROT ! </repeat> DROP
</def>


<def name="FIND-NODE" ds=" x list -- node true | x false ">
  @ CDR-BY-VALUE DUP <if> NIP TRUE </if>
</def>
<def name="FIND-LIST" ds=" x list -- sub-list true | x false ">
  SWAP >R DUP @  <repeat> DUP <while/> <!-- ( list node ) -->
  DUP @ R@ = <if> DROP RDROP TRUE <exit/></if> NIP CELL- DUP @ </repeat> 2DROP R> FALSE
</def>
<def name="FOREACH-LIST-NODE" ds=" xt list -- "><rem> xt ( node -- ) </rem>
  @ FOREACH-NODE
</def>
<def name="FOREACH-LIST-VALUE" ds=" xt list -- "><rem> xt ( node -- ) </rem>
  @ <repeat> DUP <while/> 2DUP 2>R @ SWAP EXECUTE 2R> CELL- @ </repeat> 2DROP
</def>

<def name="FOR-LIST-NODE" ds=" list xt -- "><rem> xt ( node -- ) </rem>
  SWAP FOREACH-LIST-NODE
</def>
<def name="FOR-LIST-VALUE" ds=" list xt -- "><rem> xt ( node -- ) </rem>
  SWAP FOREACH-LIST-VALUE
</def>


<def name="CALC-NODE-LAST" ds=" list -- node|0 ">
  0 <xt-of name="NIP"/> ROT FOREACH-LIST-NODE
</def>


<!-- dlist:  |^ head | tail | -->

<def name="BIND-RNODE" ds=" node rlist -- ">
  2DUP @ DUP <if> CELL- ! ! <exit/></if>
  2DROP !
</def>

<def name="BIND-DNODE-TAIL" ds=" node dlist -- ">
  CELL+
  2DUP @ DUP <if> CELL- ! ! <exit/></if>
  DROP SWAP CELL- <!-- ( node node dlist ) -->
  DUP @ <unless> 2! <exit/></unless>
  NIP DUP CELL+ SWAP CALC-NODE-LAST OVER  ! BIND-RNODE
</def>

</forth>
