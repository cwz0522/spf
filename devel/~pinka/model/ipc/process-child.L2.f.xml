<?xml version="1.0" encoding="ASCII"?>
<forth xmlns="http://forth.org.ru/ForthML/">

<slot>
  own-handles
  child-in
  child-out
  consumer-out
</slot>

<alias name="assume-consumer"     ds=" consumer-xt -- " word="consumer-out!"    />
<alias name="assume-commandline"  ds=" d-txt -- "       word="commandline!"     />


<def name="open-filename"  ds=" d-txt-filename mode -- h ">
  OVER <unless> >R 2DROP `NUL R> </unless>
  OPEN-FILE-SHARED THROW HERITABLE-HANDLE
</def>

<def name="assume-filenames"  ds=" d-txt-in d-txt-out d-txt-err -- ">
  <rem> if filename is 0 length, "NUL" assumed </rem>
  TRUE own-handles!
  W/O open-filename  >R
  W/O open-filename  >R
  R/O open-filename
                     R> R>
    assume-handles-std
</def>

<def name="stderr" ds=" -- h ">
  H-STDERR ?DUP <if>
    <rem>
      This handle may not coincide with the inherited (or default) STDERR handle.
      Default handle may be 0 (for example, in service process).
    </rem>
    DUP-HANDLE-INHERITED THROW
    <exit/>
  </if>
  0. W/O open-filename <rem> NUL pseudo file</rem>
</def>     

<def name="use-pipes-simple"  ds=" -- ">
  TRUE own-handles!
  <rem> h-read h-write </rem>
  CREATE-PIPE-ANON THROW >R HERITABLE-HANDLE        <rem> in  </rem>
  CREATE-PIPE-ANON THROW SWAP >R HERITABLE-HANDLE   <rem> out </rem>
  stderr                                            <rem> err </rem>
    assume-handles-std
  R> child-out!
  R> child-in!
</def>

<def name="close-child-out" ds=" -- ">
    child-out close-handle 0 child-out!
</def>

<def name="close-child-in"  ds=" -- ">
    child-in  close-handle 0 child-in!
</def>

<def name="close-handles-own" ds=" -- ">
  own-handles <if>
    close-child-out
    close-child-in
    FALSE own-handles!
  </if>
</def>

<handler event="cleanup" advice="before">
  close-handles-own
  0 consumer-out!
</handler>

<def name="clear" ds=" -- "><rem> redefinition </rem>
  close-handles-own
  clear
</def>

<def name="start-simple" ds=" -- ">
  use-pipes-simple create-process
    close-handles-std <rem> (!!!) </rem>
  <rem>( ior )</rem>
  DUP <if> close-handles-own THROW </if> DROP
</def>

<def name="put" ds=" a u -- ">
  DUP <if>
    child-in WRITE-FILE THROW
    <exit/>
  </if>
  2DROP
</def>

<def name="transmit-stdout" ds=" -- ">
  child-out <unless> 0 0 consumer-out EXECUTE <exit/></unless>
  4050 ALLOCATED OVER >R <q ds=" a-buf u-buf -- ">
    <repeat> 2DUP child-out READOUT-FILE THROW DUP <while/> consumer-out EXECUTE </repeat>
    2DROP 2DROP
  </q> CATCH
    R> FREE THROW
    close-child-out
  THROW
</def>


<def name="perform-simple-per" ds=" a-in u-in a-shell u-shell consumer-xt -- result ">
  consumer-out! commandline!
  start-simple
  <rem>( d-data )</rem>
  put close-child-in

  transmit-stdout

  exitcode-sure
  <rem> the object is stayed without clear (!!!) </rem>
</def>


</forth>
