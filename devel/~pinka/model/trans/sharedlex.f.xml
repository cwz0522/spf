<?xml version="1.0" encoding="Windows-1251" ?>
<forth xmlns="http://forth.org.ru/ForthML/">

<!-- Jun.2008 -->
<!-- $Id$ -->

<comment> Sharedlex extension to the spf4/forthml translator </comment>

<wordlist name="sharedlex-hidden">

<comment>
  Разделяемый лексикон — 'sharedlex' (от shared lexicon).

  Формально, разделяемый лексикон — это кортеж (name, text, wid),
  где
    name — полное имя лексикона в пространстве URI;
    text — исходный код, определяющий лексикон;
    wid — идентификатор корневого списка слов лексикона.
  Данный кортеж является синглтоном (singleton) в домене экземпляра
  форт-системы по ключу name (как все сложно ;)

  В принципе, это просто аккуратная альтернатива механизму REQUIRE.

  Основная функция механизма sharedlex состоит в том, чтобы 
  из заданного name предоставить wid. При этом, если с заданым name 
  в форт-системе еще не связан никакой wid, то создается новый словарь (wid),
  связывается с name, из name вычисляется text (исходный код) и транслируется
  в созданный словарь. Далее, возвращается wid, который связан с заданным name.

  По 'using' словари разделяемых лексиконов либо получают локальный алиас,
  либо добавляются на вершину штатного контекста (если имя алиаса не заданно).

  Родителем f:using должен быть только f:forth (для баланса
  управляющего стека и стека контекста).

  <aside>
  Отдельный стек поиска для разделяемых лексиконов более
  не используется.
  Отдельный стек порождает риск неверного перекрытия имен
  в силу того, что он может просматриваться либо целиком
  до штатного стека поиска, либо целиком после.
  Это такой же риск, как и при использование штатного контекста,
  поэтому отдельный стек ничем не оправдан.
  </aside>
</comment>

<export>

  `lexicon.basics-aligned FORTH-WORDLIST @ CDR-BY-NAME NIP NIP
  `FORTH-KERNEL WORDLIST-NAMED !

<def name="SHAREDLEX-TOP" ds=" -- wid">
  <rem> SCOPE-TOP </rem>
  CONTEXT @ 
  <comment> временно, для обратной совместимости </comment>
</def>

`NDROP-SCOPE DEFINED <unless>
<def name="NDROP-SCOPE" ds=" u -- ">
  DUP <unless> DROP <exit/></unless>
  DUP SCOPE-DEPTH UGT <if> -5017 THROW </if>
  <times> DROP-SCOPE </times>
</def>
</unless>

</export>

<wordlist name="deployed"><comment>
  Корневой словарь для разделяемых лексиконов;
  содержит уникально именованные словари загруженных лексиконов.

  Располагается в базовом хранилище (точнее, в текущем на момент
  данной трансляции, но, по соглашению оно должно быть и базовым).
  Т.к. в spf/4 список слов привязан к хранилищу (см. spf/storage.f),
  и при установке списка слов 'deployed' текущим, текущим станет
  и хранилище, в котором создан этот список слов.

  Другой возможный вариант: загружать из дочерних потоков 
  в другое (не базовое) общее временное хранилище — пока оставлен
  про запас.
</comment></wordlist>

<def name="resolve-interface" ds=" d-interface-uri -- d-file-uri ">
  2DUP `: CONTAINS <unless> -5018 THROW </unless>
  2DUP `file:// STARTS-WITH <if> -5018 THROW </if>
  <rem> Only checks. The uri is not changed by default.</rem>
</def>

<def name="(load-sharedlex)" ds=" d-interface -- wid ">
  GET-ORDER N>R ONLY  <!-- spf4 specific -->
  <!--
  FORTH-KERNEL CONTEXT ! -->
  deployed PUSH-CURRENT  <rem> Откладывание идет в базовое хранилище </rem>
  <wordlist name="{ 2DUP }">
    resolve-interface EMBODY
    GET-CURRENT
  </wordlist>
  DROP-CURRENT
  NR> SET-ORDER
</def>
<def name="load-sharedlex" ds=" d-interface -- wid ">
  '(load-sharedlex) WITHIN-FORTH-STORAGE-EXCLUSIVE <!-- spf4 specific -->
  <comment>
    Т.к. все разделяемые лексиконы загружаются в одно общее хранилище,
    и загружатся они могут в контексте различных дочерних потоков,
    здесь гарантируется, что они будут загружатся по очереди.

    При нарушении соглашений о реализации разделяемых лексиконов 
    (как то — создание новых потоков в процессе трансляции) есть возможность
    получить взаимную блокировку (deadlock).
  </comment>

  <comment>
    Если разрешить выделение памяти при загрузке лексикона, 
    то следует устанавливать общий хип процесса. Но, без
    дополнительных соглашений и процедур это без особой пользы.
  <rem>
  GetProcessHeap THREAD-HEAP <let><!-- spf4 specific -->
    '(load-sharedlex) WITHIN-FORTH-STORAGE-EXCLUSIVE
  </let>
  </rem></comment>
</def>

<def name="fetch-sharedlex" ds=" d-interface -- wid ">
  deployed OBEY <unless> load-sharedlex </unless>
</def>


<f:g xmlns="http://forth.org.ru/ForthML/Rules/"
  xmlns:f="http://forth.org.ru/ForthML/"
>
<rule match="f:using">
  STATE? <f:if> ABORT </f:if>
  `href GetAttribute expanded-url
  fetch-sharedlex
  <f:choose> GetName? <f:when><f:const name="{}"/></f:when>
    <f:otherwise> PUSH-SCOPE </f:otherwise>
  </f:choose>
</rule>
<rule match="f:forth">
  SCOPE-DEPTH >R
  <next-match> -5321 THROW </next-match>
  SCOPE-DEPTH R> - NDROP-SCOPE
</rule>
</f:g>
<comment>
  Сделана поддержка создания локального алиаса на загруженный словарь,
  чтобы далее использовать этот алиас как уточнение имени словарем (типа p::function),
  вместо того, чтобы добавлять этот словарь в контекст с риском неверного перекрытия
  при совпадении имен.
  Имя алиаса локально и задается в месте использования, поэтому непредвиденное
  совпадение этого имени исключено.

  Пример использования:
    <using name="lib" href="http://example.com/shared/library"/>
  и далее
    lib::function 
  Атрибут 'name' опционален; если его нет, то словарь добавляется в контекст
  и убирается оттуда при достижении /forth
</comment>

</wordlist>

</forth>