<?xml version="1.0" encoding="ASCII"?>
<forth xmlns="http://forth.org.ru/ForthML/">

<rem><bind-up>
  accept-request?
  treat-request
</bind-up></rem>

<def name="check-request" ds=" -- ">
  `http-excess h@ NIP <if>
    `#400 STHROW <rem> bad request </rem>
  </if>
  http-ver-major 1 EQ <unless>
    `http-request h@ <logS>request line</logS>
    `#505 STHROW 
  </unless><!-- HTTP/1.1 only -->
</def>

<def name="allow-pipelining?" ds=" -- flag ">
  FALSE <!-- not supported yet -->
</def>

<def name="connection-alive?" ds=" -- flag ">
  sock <unless> FALSE <exit/></unless>
  connection-close? 0EQ
</def>

<def name="log-error" ds=" code -- ">
  DUP -2 EQ <if> DROP LAST-ERROR-MSG <logS>error, -2</logS><exit/></if>
  <logN>error, ior</logN>
</def>

<def name="treat-error" ds=" ior|0 -- ">
  DUP <unless> DROP <exit/></unless>
  DUP sock-err EQ <if>
  <choose>
    DUP 10058 EQ <when>
      <logN>client, WSAESHUTDOWN</logN>
      0
      0 sock!
    </when>

    DUP 10054 EQ <when>
      <logN>client, WSAECONNRESET</logN>
      0
    </when>

    DUP 10053 EQ <when>
      <logN>client, WSAECONNABORTED</logN>
      0
      <rem> WinSock aborts an established connection after data retransmission fails
           (receiver never acknowledges data sent on a datastream socket).
      </rem>
    </when>

    DUP 10060 EQ <when>
      <logN>client, WSAETIMEDOUT</logN>
      0
    </when>
    
  </choose><rem>( ior|0 )</rem>
  </if>
  DUP
  <xt-of name="treat-error-lite" ds=" ior -- "/> CATCH <rem>( ior 0 | ior x ior2 )</rem>
    DUP <if> NIP   DUP <logN>error, treat-error-lite</logN></if> DROP
    <rem>( ior|0 )</rem>
  DUP <unless> DROP <exit/></unless>
  log-error
</def>
   
<def name="treat-request-async" ds=" -- ">
  <emit-line>treat-request-async -- to be provided</emit-line> ABORT
</def>

<def name="dispatch-request" ds=" -- ">
  allow-pipelining?    <if> connection-close? <unless> has-content <unless>
  treat-request-async  <exit/></unless></unless></if>
  treat-request

  <!-- 8.1.2.2 Pipelining 
    Clients SHOULD NOT pipeline requests using non-idempotent methods
    or non-idempotent sequences of methods 
  -->
</def>

<def name="(perform-dialog)" ds=" -- ">
  <until> sock <while/>
    accept-request?
  <while/>
    check-request
    dispatch-request
    <rem> here  after the cleanup </rem>
    sock 0EQ
  </until>
</def>

<def name="perform-dialog" ds=" -- ">
  <xt-of name="(perform-dialog)"/> CATCH treat-error
  <rem>TODO: refactoring </rem>
</def>

<def name="treat-client" ds=" sock -- ">
  DUP <logN>begin dialog</logN>
  assume-sock
  perform-dialog
  <log>end dialog</log>
  sock <if><rem> may be after exception </rem>
    close-socketline
  </if>
</def>

</forth>
