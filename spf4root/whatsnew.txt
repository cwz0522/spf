SP-Forth v3.70 (SPF/3.70) является переработанной версией SPF/3.14.
Основные цели переработки - компиляция SPF самим собой, улучшение
обработки ошибок форт-системой, "потоко-безопасность" всех слов для
организации многопоточности уже на уровне ядра SPF.

* SPF/3.70 компилируется предыдущими версиями SPF - SPF/3.0-3.16
  раньше SPF/3 компилировался только by Win32for
  SPF/3.70 может компилировать и сам себя. Правда полученные exe
  будут различаться по адресам привязки в памяти (на hex 20000).
  Функционально и по размеру отличаться не будут.

* Вместо одного файла с исходным текстом - теперь больше 30-ти,
  разбито по "темам", зависимости от ОС, уровню и т.п. Удобнее
  ориентироваться и портировать независимые части.

* Добавлены средства работы с USER-переменными - традиционный для
  многозадачных форт-систем способ исключить взаимные влияния
  потоков на общие переменные. Многопоточность превнесена на
  уровень ядра - в SPF/3.1x она прилеплялась сверху в виде библиотеки
  ts2.txt и патчей для READ-FILE и WRITE-FILE, что было не совсем
  полноценной реализацией нужных функций. Все форт-слова SPF теперь
  можно свободно использовать в многопоточном режиме без конфликтов
  по общим переменным и буферам - при создании потока автоматически
  создаются собственные копии этих областей данных.

* Механизм структурированной обработки исключений Форта CATCH/THROW
  объеденен с принятым в Windows сишным механизмом ловли исключений
  SEH, что позволяет превращать даже аппаратные исключения (деление
  на ноль, обращения по неверному адресу и т.п.) в THROW Форта и
  обрабатывать их программно без GPF-окон Windows. Это значительно
  упрощает отладку - при грубых ошибках Форт-система не завалится,
  а выдаст подробный дамп исключения - код ошибки, место ошибки
  (адрес и имя слова) и содержимое регистров. Этот механизм также
  многопоточный, в отличие от реализации в SPF/3.15, который
  приходилось исправлять внешними библиотеками.

* Добавлены слова FS@ и FS! для чтения-записи ячеек в сегменте FS.
  В Windows он используется для SEH.

* Есть возможность создать custom варианты кода входа и выхода из
  процедур, объявленных как WNDPROC (в SPF так объявляются все
  функции, которые вызываются by Windows - оконные процедуры,
  экспортируемые функции, callback, функции потоков и т.п.). По
  умолчанию они создают форт-стеки и области данных для
  USER-переменных - для выполнения WNDPROC-форт-процедуры.

* Некоторые форт-слова, которые раньше были определены на ассемблере,
  теперь написаны на Форте. В основном это относится к словам парсера.

* В парсер добавлены слова для потоко-безопасного парсинга - без
  использования буфера в HERE (слово WORD по стандарту его использует,
  и это приводит к невозможности одновременной трансляции несколькими
  потоками). Основное новое слово парсера - NextWord.

* Добавлено слово SFIND - аналог FIND, но берущий строку в формате
  (addr u) вместо строки со счетчиком.

* Добавлено слово ?SLITERAL - аналог ?LITERAL, но берущий строку в
  формате (addr u) вместо строки со счетчиком.

* INTERPRET переписан без использования WORD и FIND. Теперь NextWord
  и SFIND - потоко-независимо.

* HEX-числа можно записывать в сишном формате 0xABCD - без
  переключения BASE

* Слово ?CONSOLE оставлено, но не используется. spf370.exe запускается
  как нормальное консольное приложение, а не как GUI с консолью.

* MAINX (указатель на custom инициализацию в SPF/3.x) по умолчанию
  выводит в консоль мои копирайты.

* INCLUDED отслеживает номер строки и имя транслируемого файла для
  вывода при ошибке не только ошибочной строки, но и её расположения.
  CURFILE и CURSTR.

* INCLUDED открывает файл в режиме share read, чтобы другие
  форт-системы могли обращаться к тому же файлу в то же самое время.

* При ошибках сообщения об ошибках берутся по-прежнему из SPF.ERR,
  но коды ошибок там можно записывать в hex-виде. И номер ошибки
  выводится именно в том виде, в котором записан spf.err, а не с
  текущим BASE, что приводило к "неузнаваемым" кодам ошибок.

* ENVIRONMENT? теперь берет envir.spf не из текущего каталога, а из
  каталога, где лежит форт-система (spf*.exe).

* ENVIRONMENT? теперь сначала ищет строку в windows environment и
  в случае успеха возвращает её значение c-addr u true.

* Версия ассемблера, с помощью которого компилируется spf370, создает
  намного более компактный код (на многих ассемблерных инструкциях
  выигрыш в три байта), чем версия, входящая в win32for, и маш.код
  spf370 получается более компактный чем spf314. Например, инструкция
  +LOOP, которая компилируется как inline, короче на 9 байт.

* Слово SAVE больше не пытается открывать spf-stub.exe, а берет шаблон
  заголовка из текущего выполняемого файла (самого себя).

* Добавлены слова ModuleName и ModuleDirName, возвращающие полное имя
  файла запущенной системы и каталог, где лежит система,
  соответственно. Используются by SAVE и ENVIRONMENT?.

* Добавлены слова TASK TASK: START STOP SUSPEND RESUME PAUSE
  для создания именованных и неименованных потоков, запуска, удаления,
  усыпления, пробуждения и приостановки потоков.

* Размер spf*.exe увеличился примерно на 5Кб - стал размером 32Кб.

07.Oct.1999

* Сделаны более компактные варианты LIT, и ?BRANCH. Исправление прислал
  Valentine Zaretsky. При перекомпиляции spf370 самим собой выигрыш в
  рамзере - 1Кб (около 3%).

* Исправлено слово OK, которое печатает "Ок" и глубину стека при диалоге
  с форт-системой. На неприятности с очень длинным циклом в случае сбоев
  (например, отрицательная глубина стека) указал Dmitry Yakimov.

* По предложению Dmitry Yakimov. Стандартные слова ALIGN и ALIGNED теперь
  не "заглушки", как всегда раньше было в SPF, а реально выравнивающие
  слова, причем на заданный размер слов. Этот размер задается в
  USER-переменной ALIGN-BYTES, по умолчанию =1 (т.е. ничего не
  выравнивается, как было во всех SPF). Слово HEADER теперь вызывает
  ALIGN для выравнивания адреса поля кода (CFA).

* Добавлено VECT-слово <FLOAT-INIT>, вызываемое в начале каждого потока.
  По умолчанию ничего не делает. Необходимо для FLOAT-библиотеки by
  Dmitry Yakimov.

* слово ERROR2 (обработчик ошибок по умолчанию) печатает теперь номер
  ошибки и в случае "неизвестная ошибка".

27.Oct.1999

* слово ANSI>OEM теперь работает правильно. Из-за ошибки при целевой
  компиляции SPF/3.70 оно вызывало exception при выполнении.
  Добавлено также слово OEM>ANSI

* Слово CONSOLE-HANDLES не трогает больше SOURCE-ID. Соответственно
  QUIT теперь устанавливает SOURCE-ID=0 вместо слова CONSOLE-HANDLES.

* CONSOLE-HANDLES вызывается один раз при старте задачи, и при вызове
  QUIT, а не на каждый поток.

* Слово NextWord теперь не допускает чтобы >IN был больше чем #TIB -
  для совместимости с SPF/3.16. В предыдущих версиях SPF/3.70 при
  достижении конца TIB >IN становился больше #TIB на единицу.
  Это было причиной невозможности скомпилировать самый старый пример
  из SPF/3.x - samples\nf.txt. Теперь он компилируется, но работает
  не совсем так, как скомпилированный версией SPF/3.1x, из-за того что
  ORDER (порядок поиска в словарях) свой у каждого потока, в том
  числе у WNDPROC-процедур. В результате nf.txt начинает отображение
  словарей со словаря FORTH вместо словаря "Классы".

! Спасибо ruvim и boa за обращение моего внимания на эти проблемы в 3.70.

28.Oct.1999

* Слово ERROR2 теперь ищет spf.err не в текущем каталоге, а в каталоге
  запуска задачи (ruvim).

23.Jan.2000

+ в /~ac/lib добавлен пример работы с html-диалогами (вывод диалога,
  отображающего внутри любой html средствами IE4 или IE5)

28.Jan.2000

+ теперь в spf371.exe включены ресурсы иконок и возможность их изменения

+ в /~ac/lib сделаны добавления в image.f для чтения иконок из ресурсов

04.Feb.2000

+ в /~ac/lib добавлена библиотека поддержка объектных интерфейсов
  DCOM/COM/ActiveX/OLE: основное слово CreateObject и средства описания
  и использования интерфейсов (то, чем работают с объектами в COM :).

+ в ядро SPF/3.71 добавлено слово API-CALL для вызова внешних процедур
  по адресу - более низкоуровневое слово чем (WINAPI-CODE). Используется
  при вызовах методов объектов в COM.

07.Feb.2000

+ в ядро SPF/3.71 добавлено слово ICONS:, используемое как
  ICONS: 32x32icon_filename 16x16icon_filename
  Файлы иконок должны быть соответственно 760 и 318 байт размером.

26.Feb.2000 (3.72)

* убрано слово /notransl из SPF. ruvim подсказал хороший способ по
  избавлению.

03.Mar.2000 (3.73)

* изменена семантика слова ModuleDirName - теперь возвращаемая
  строка заканчивается символом "\", т.е. стала на 1 длиннее

+ добавлено слово +ModuleDirName ( addr u -- addr2 u2 )

* открытие SPF.ERR и ENVIR.SPF переделано с использованием
  +ModuleDirName, код стал прозрачнее

+ добавлено слово CGI-OPTIONS, запускаемое в самом начале инициализации
  SPF. Производится установка булевых переменных CGI? и POST?
  Приложение может анализировать, запущено ли оно как CGI. Если
  CGI?=TRUE, то приложение запущено web-сервером, и можно анализировать
  другие переменные окружения. TITLE не выводит title в случае CGI.
  Ядро SPF не делает никакого парсинга передаваемых переменных, оставляя
  это на долю библиотек. Подробности об SPF+CGI см. docs\cgi.txt

* В случае ошибки broken pipe SPF не выводит информацию об ошибке,
  т.к. это как правило не ошибка, а конец входного потока в случае
  запуска в CGI-режиме. Добавлена обработка этого случая в THROW.

* Секция инициализации VECT-слов ERROR, <PRE> и т.д. перенесена
  в раздел "один раз на поток", т.к. это глобальные переменные.

* Цикл BEGIN AGAIN перенесен внутрь слова QUIT, т.к. стандартное описание
  этого слова явно подразумевает продолжение работы с начала после ошибки,
  а в предыдущих SPF при ошибке выход происходил во внешний по отношению
  к QUIT цикл. Соответвенно в цикле внутри QUIT выполняется не MAIN1.
  А значением VECT-слова <MAIN> по умолчанию является не MAIN1, а QUIT.
  И из INIT вызывается не QUIT, а <MAIN>. Не смотря на такие переменные
  удар по совместимости должен быть минимален.

* Слово ERROR2 не выводит сообщений при коде ошибки 0

* Улучшен обработчик аппаратных исключений. Теперь кроме дампа регистров
  выводится и содержимое стека возвратов на момент возникновения исключения.
  Вместе с числом со стека выводится имя слова. Таким образом легко
  проследить последовательность вызываемых слов, приведших к ошибке.

* ENVIRONMENT? теперь не вызывает 2 THROW при отсутствии файла ENVIR.SPF

+ При старте SPF пытается интерпретировать файл начальной настройки
  форт-системы SPF.INI (программа на Форте).
  Файл SPF.INI сначала ищется в текущем каталоге, затем, в случае неудачи,
  в каталоге, из которого был запущен spf373.exe.

+ Добавлено слово SPF-INIT? (TRUE VALUE SPF-INIT?), которое позволяет
  пропустить всю эту spf-специфичную инициализацию при старте.
  Вообще INIT теперь выглядит так:
: (INIT)
  SPF-INIT?
  IF
    ['] CGI-OPTIONS ERR-EXIT
    ['] SPF-INI     ERR-EXIT
    MAINX @ ?DUP IF ERR-EXIT THEN
    ['] OPTIONS     ERR-EXIT
  THEN
  ['] <MAIN>      ERR-EXIT
  BYE
;
  т.е. вы можете оставить только <MAIN>, а командные строки, и т.д.
  анализировать своей программой.

+ INCLUDED модифицирован так, что в случае неудачи открытия включаемого
  файла производится попытка включения файла с путем относительно каталога,
  откуда запущен spf373.exe. Т.е., например,
  S" ~ac\lib\require.f" INCLUDE будет открывать файл
  "текущий_каталог\~ac\lib\require.f", а при неудаче
  "каталог_откуда_запушен_spf\~ac\lib\require.f".

* изменена структура каталогов - asm и ext переехали в lib\asm, lib\ext.
  Далее предлагается старые и "общие" библиотеки помещать в иерархии lib\*.
  А библиотеки, написанные и сопровождаемые отдельными разработчиками -
  в каталогах ~nick_разработчика\lib\*, например ~ac\lib\require.f
  Включение библиотек - S" ~ac\lib\require.f" INCLUDED.
  Описанные выше изменения слова INCLUDED позволят удобнее работать с одной
  копией библиотек, а не копировать их из проекта в проект, как сейчас
  наблюдается в среде SPF-разработчиков ;)
  INCLUDED частично вобрал в себя средства слова REQUIRE.

+ Для упрощения настройки рабочей среды добавлен файл
  docs\spf_path_install.reg
  который при запуске добавит в регистри Windows информацию о
  пути к spf373.exe и свяжет этот файл с расширениями .spf и .f
  Путь по умолчанию c:\spf\spf373.exe. Если SPF установлен в
  другой каталог - reg-файл перед запуском следует изменить
  (вручную, пока нет инсталятора).
  Этот файл также свяжет символический линк spf.exe с файлом spf373.exe
  (т.е. если через "Пуск/Выполнить" запустить программу "spf.exe" -
  запустится spf373.exe)

+ Упрощен механизм замены обработчиков литералов. Слово INTERPRET
  в случае отсутствия слова в словаре перед тем как вызвать SLITERAL?
  пытается найти в словаре и выполнить слово NOTFOUND ( addr u - ...)
  Слово NOTFOUND может делать с литералом что угодно (вместо SLITERAL?)
  Например:
  5 5 + .
  10  Ok
  : NOTFOUND ." =" TYPE ." = " ;
   Ok
  5 5
  =5= =5=  Ok
  В ядре SPF слово NOTFOUND отсутствует, поэтому работает SLITERAL?.

* размер spf373.exe на 1Кб больше, чем spf372.exe

15.Mar.2000 (3.74)

* оптимизированы слова CMOVE и NEGATE (day)
* MAINX теперь выполняется ДО включения spf.ini (micro)
* исправлена ошибка в 486asm (1001)
* исправлена ошибка в работе дампа исключения под Win95 (micro)

23.Mar.2000

+ REQUIRE и REQUIRED из очень часто используемой библиотеки ~ac/lib/require.f
  вставлены в ядро SPF

25.Mar.2000

+ для исключения необходимости в хэках при создании временных словарей
  при реализации temps (locals) добавлено слово TEMP-WORDLIST
  Использование ничем не отличается от WORDLIST. Модификация поведения
  в следующем: когда словарем компиляции (CURRENT) является временный
  словарь, HERE выдает не адрес вершины основного словаря, а адрес вершины
  временного словаря. И вся компиляция автоматически будет производиться
  в эту область памяти. Реализовано это через замену переменной DP на
  процедуру DP, которая делает проверку на "временность" словаря.
  Поведение старого DP (без проверки) реализует новая переменная "(DP)".
  Удаление временного словаря - FREE-WORDLIST.

+ Целевой компилятор теперь считает номер билда ядра SPF. Значение билда
  хранит VALUE VERSION.

28.Mar.2000 3.75 build 17
* Переделал управление памятью в ядре SPF/3.75. Теперь каждому потоку
  создается _отдельный_ хип (и именно из него выделяется блок для USER vars).
  И ALLOCATE выделяет память из локального хипа потока. Соответственно
  автоматически освобождается при завершении потока (если этот поток
  завершается сам, а не убивается другим потоком по STOP). Кроме того, ALLOCATE
  теперь выделяет на 4 байта больше, чем просят и записывает туда адрес
  процедуры, которая вызвала слово ALLOCATE. Эдакая примитивная классификация.
  Это позволяет простенькому слову MEM (REQUIRE MEM ~ac/lib/memory/heap_enum.f)
  в процессе прогулки по хипам потоков показывать, какая память кем выделена.
  В результате сегодня уже нашел два memory leaks - при компиляции литералов
  библиотекой ~ac/lib/str.f и в ядре - при обработке hardware exceptions,
  исправил.

+ В ядро добавлены слова для поддержки LOCALS: (LocalsExit) RFREE
  (RALLOT) RALLOT RP+! RP+ RP+@ DRMOVE (см. src\spf_forthproc.f)

* Предложена новая реализация локальных переменных на основе идей из
  библиотек temps и args. Пока в стадии тестирования ~ac/lib/locals.f

05.Apr.2000 3.75 build 32

* исправлено слово INCLUDED чтобы в момент трансляции не было лишних
  чисел на стеке (от 2DUP filename)
* дописано забытое слово RFREE, исправлены комментарии

19.Apr.2000 3.75 build 40

* ускорена работа со стеком возвратов (~day)

24.Apr.2000 3.75 build 48

* Исправлена реализация REFILL: последовательность H-STDIN...READ-LINE
  заменена на ACCEPT, т.к. в этой версии SPF это одно и то же, а
  для "Форта вообще" правильнее ACCEPT, т.к. именно это слово служит
  для чтения строки с консоли.

* Исправлено слово "ENVIRONMENT?": H-STDIN заменен на SOURCE-ID

25.Apr.2000 3.75 build 57

* больше не надо набирать DONE для сохранения SPF375.exe :)

10.May.2000 375058

* исправлена ошибка в ERROR2 - исчерпание стека в случае неизвестной
  ошибки (~ruvim)

11.May.2000 375059

* после exception при трансляции значение CURFILE теперь обнуляется
  (~ruvim)

15.May.2000 375060

* закомментирована старая версия INCLUDED :)

20.May.2000 375066

* исправлено слово USER-CREATE для совместимости с DOES>
* USER определено через USER-CREATE
+ добавлено слово USER+, которое из user-offs получает адрес
  этой переменной в текущем потоке
+ добавлено слово HEAP-COPY для упрощения копирования строк
  в хип (используется в INCLUDED) - ~micro

26.May.2000 375069

* <MAIN> теперь не запускается в случае CGI GET:
  CGI? @ 0= POST? @ OR IF ['] <MAIN> ERR-EXIT THEN (~day)

18.July.2000 375073

* C-SMUDGE сделан USER-переменной (~ruvim)
* небольшая оптимизация CODE-слов

14.Oct.2000 375075

* убрано сохранение ECX из API-CALL и WINAPI-CODE (~day)

02.Nov.2000 375076

* SEARCH-WORDLIST оптимизирован на 10% (~day)

20.Nov.2000 375079

* Исправлена ошибка в CREATE-HEAP - флаги создания хипа
  были не в той системе счисления (~ac)
* EVALUATE восстанавливает за собой буфер TIB и в
  случае ошибки (~ruvim)
+ Добавлены и доработаны бибилиотеки в ~ac/lib,
  ~nemnick, ~boa, ~ss.
+ docs\spf_path_install.reg теперь включает настройки и
  для FAR (~day)

24.Nov.2000 375080

* исправлен RFREE (~day)

25.Nov.2000 375081

* В ядро включено слово : NOTFOUND ( a u -- )   ?SLITERAL ; (~ruvim)

03.Dec.2000 375084

* Исправлено падение SPF при неверных параметрах HEAP-COPY (Dmitry S. Bobrik)

03.Dec.2000 375085

* Исправлена работа SMUDGE и :NONAME в случае пустого словаря (~nemnick)

03.Dec.2000 375086

+ Добавлено слово BEHAVIOR по совету ~ruvim

03.Dec.2000 375089

+ Во всем SPF словосочетания BL WORD заменены на NextWord (~micro)
+ Добавлены слова 'S",' и '+SWORD'


JP-Forth v3.75 (SPF/3.75) является переработанной версией SPF/3.75081.

27.Nov.2000

* Папки dev и samples. Соответственно введено слово +LibraryDirName,
  учитывающее 'dev\'.

* Новая версия ассемблера от Jim Schneider - 1.26

* Дизассемблер от Andrew Mckewan and Michael Maximov, впоследствии
  немного переработан + исправлено несколько ошибок

* Кэширование TOS (Top Of Stack) в EAX. За счет этого достигается некоторое
  ускорение форт приложений. Оптимизированы под PII/III большинство
  асм определений, оптимизированы алгоритмы асм определений.

* Оптимизация циклов: DO LOOP near цикл короче на 8 байт, а
  в случае far цикла на 4 байта короче чем DO LOOP в спф
  Тело пустого цикла всего 2 команды.

* Выравнивание тела цикла на 4, заполнение NOP

* Сильно сократил слова API-CALL и _WINAPI-CODE, убрал сохранение ESI,
  + оптимизация под TOS в eax, скорость соответственно увеличилась.

* Слово TIMER@ ( -- tlo thi ) - возвращает значение таймера процессора
  (только для процессоров Intel Pentium совместимых). Заодно переделал
  профайлер от Ruvim.

* Слово RLIT, ( u -- ) - компилирует инструкцию push dword #

* Файл src\compiler\jpf_modules.f - работа с форт модулями.
  Выглядит так:
  MODULE: testM
  ...
  EXPORT
  ... \ interface definitions
  ;MODULE
  От слов MODULE: до EXPORT на стеке данных находится предыдущий current
  Модули могут быть вложенными.

* Слово OK1 преобразовано - теперь после каждого <enter> распечатывается
  часть содержимого стека в текущей системе счисления с указанием DEPTH.

* Осуществилась компиляция jpf by jpf, достаточно закомментировать в целевом
  компиляторе слово EXECUTE, но по некоторым соображениям оставлена
  компиляция by spf.

* Найден баг, из-за которого не работала многозадачность. Просто в jpf_forthproc.f
  забыл на DECIMAL переключить и некоторые слова скомпилировались с 16 в BASE.

28.Nov.2000

* SMUDGE и :NONAME теперь не слетают если в CURRENT пустой словарь

* ROLL

* OPTIONS теперь не портит входного буфера, так как ипользует в качестве оного
  буфер, возвращенный GetCommandLineA, а также не портит SOURCE-ID

* Исправлена ситуация - если при подключении spf.ini или файл,
  подключаемый через командную строку оставляет чего-нибудь
  на стеке, то при exception затем стек не очищался.
  Модифицированы слова: MAIN1 (INIT)
  Введено слово PROCESS-OUTER - кладет в TIB строку "' SPF-INI ERR-EXIT OPTIONS".
  Теперь в цикле <MAIN> первым выполняется INTERPRET, чтобы разобрать
  возможный непустой TIB при запуске (мне кажется - это плюс).
  (~micro)

* Изменился exe-stub (заголовок exe файла). У спф была неправильно
  сформирована таблица указателей на директории (не файловые).
  Заодно и copyright надпись сменил.

* Jp-forth теперь компилируется сам собой.

* Некоторые частоиспользуемые слова при целевой компиляции компилируются inline.
  DUP DROP >R @ R> 1+ SWAP

* Все папки разработчиков перемещены в devel директорию (~ruvim)

* Исправлена ошибка в ?SLITERAL2 когда при вводе " или ""
  происходил exception (~trasher)

* Добавлена возможность
  обращения к словам в словарях в виде  vocname1::wordname
  или vocname1::vocname2::wordname и т.п.
  Можно например писать: 2 FORTH::DUP
  (~ruvim)

* NOTFOUND в INTERPRET исполняется через CATCH

* Слова низкого уровня работы с числами с плавающей точкой F+ F- ...
  перемещены в ядро (jpf_floatkern.f). Слова высокого уровня F. FE.
  находятся в lib\include\float.f и не требуют для работы никаких дополнительных
  библиотек.

* Слова N>R и NR> ( R: x1 ... xn n -- D: x1 ... xn n ) (~ruvim)

* Слова ... ..: ;.. - реализация идеи M.L. Gassanenko (mlg@forth.org)
  называемая Scattering a Colon Definition.

* Слово STARTUP ( : STARTUP ... ; ) - выполняется по CATCH перед MAINX и
  после CGI-OPTIONS.
  Можно наследовать с помощью слова ..: , например:
  ..: STARTUP 2 . ;..
  Сохраните систему и запустите - 2 напечатается перед TITLE.

04.Dec.2000 сборка 095

* При повторном отрицательном параметре слова HEAP-COPY система падала. fixed.

* ENVIRONMENT? не освобождала 518 байт каждый раз при использовании.

* Слово TERMINATE ( -- ) уничтожает текущий поток и его хип.

* Исправлено слово NR>

* Обращение к словам в словарях ( :: ) доступно теперь и к словам
  использующих ORDER, возможно: 2 FORTH::' DUP EXECUTE
  Мало того, возможен последовательный вызов нескольких слов, например:
  S" test" FORTH::2DUP::TYPE::CR::2DUP::TYPE::CR::2DUP::TYPE::CR::TYPE
  (но только последнее слово может компилироваьтся, остальные всегда
   исполняются).

  А также можно оставлять пробелы после последнего :: например:
  2 FORTH:: ' DUP EXECUTE - для читабельности (и подсветки синтаксиса).
  (~ruvim)

* STARTUP переименовано в STARTUP-PROCESS

* Новое слово STARTUP-THREAD - вызывается из USER-INIT

* Убрано слово <FLOAT-INIT>. Вместо него FLOAT библиотека использует
  STARTUP-THREAD.

05.Dec.2000 сборка 096

* PROCESS-OUTER идет инлайном, засим убрано.

+ : BEHAVIOR CFL + @ ;

+ Добавлены слова S", и +SWORD

+ Везде словосочетания BL WORD заменены на NextWord (~micro)

+ Библиотека локальных переменных по адресу lib\ext\locals.f
  понимает выделение блоков памяти например:
  : test { \ g[ 12 ] } \ все цифры в байтах, можно писать выражения типа >IN @ 12 +
     1 g[ CELL+ !
  ;
  Работает очень быстро. Я выделял даже 250 килобайт...

* Исправлена ошибка в RESIZE - нужно было CELL+ добавить.

* Слова RESIZE ALLOCATE и CREATE-HEAP не создают больше mutex при обращении к
  хипу, что позволит многопоточным приложениям выделение памяти производить
  быстрее.

+ Переменная EXTRA-MEM - содержит количество памяти, выделяемое вместе
  с пулом потока (CREATE-HEAP) для USER переменных, работающих на стадии
  компиляции, например. Содержит 4096 (в спф было 16 килобайт!).
  Для вебсерверописателей :)

+ Ассемблер теперь компилирует на INC/DEC reg 1 байт вместо двух

+ Слова STARTLOG и ENDLOG - создают лог файл spf.log ввода - вывода консоли
  (~boa). Переменная H-STDLOG - указатель лог файла.
  Слово TO-LOG ( addr u -- ) копирует строку в лог файл
  (если он есть, если нет, пропускает).
  Плюс при отладке, так как Win98 в отличие от WinNT не позволяет делать
  так: c:\jpf> test.f >a, а в WinNT нельзя перенаправить ввод, только вывод,
  в другой файл. Если в spf.ini поставить STARTLOG то можно легко после
  компиляции анализировать результат.
  Для примера: STARTLOG WORDS BYE
  А также если открыть в FAR в другом окне редактирования (переключение по
  Ctrl+Tab) просмотр файла лога, то он будет обновляться автоматически!

  В GUI приложении можно выводить отладку словом TO-LOG

Сборка 099

+ Переработаны слова ACCEPT и EKEY - просто уменьшен размер.

+ Добавлено слово FLUSH-FILE ( fileid -- ior ) \ 94 FILE EXT
  Сбрасывает буфера файла fileid на диск.

+ Слово HASH ( addr u u1 -- u2 ) - хэш функция
  addr u - строка. если u1 не 0 хэш будет в интервале 0 ... u1-1
  если u1=0 хэш в интервале 0 ... 2^32-1

+ Слово EVAL-WORD - используется в NOTFOUND и в locals.f (~ruvim)

+ EXTRA-MEM восстановлено до 16 килобайт. Ведь при сохранении релиза
  мы можем записать туда 0.

+ Слово FCALL ( "name" -- ) в ассемблере - вызов форт слова в CODE
  определении

+ Слова NRCOPY TRAP-CODE в jpf_forthproc.f (~day\lib\try.f)

! Исправлен баг в дизассемблере - mv2

Сборка 100

+ Великолепная оптимизация от Михаила Максимова (~mak)
  Размер компилируемого кода практически не увеличивается (по сравнению
  с спф без оптимизации) в результате
  тотальной макроподстановки за счет того, что идет щелевая оптимизация
  ассемблерного кода!
  Но не проходят конструкции типа ' DUP >R на стадии интерпретации.
  По ANS и не должны проходить... (хотя это можно убрать)

Сборка 101

+ Переписано SWAP с учетом оптимизатора

+ Все компилируемые слова выравниваются на границу 16 байт.
  Как показали эксперименты, выравнивание на такую границу весьма полезно
  для больших слов (обычно написанных на форте), а так как все критические
  места форт системы написаны на асме и инлайнятся, то все слова форт системы
  компилируются с выравниванием 0. Так как в приложении количество
  высокоуровневых слов исчисляется сотнями, то увеличение размера незначительно
  (1 - 2%), быстродействие при этом увеличивается на 10%.

+ Специальный словарь NON-OPT-WL - содержит >R R> RDROP, которые не должны
  инлайнится в некоторых случаях (в дальнейшем возможно добавление других слов).
  Например для ситуации ['] >R COMPILE,
  Используется словом '

! Исправлена ошибка в макрооптимизаторе, из-за чего не работало слово
  STRALLOT в библиотеках ~ac\lib\str*.f (~mak)

+ Слово : EVALUATE-WITH ( ( i*x c-addr u xt -- j*x ) ( ~ac)
  \ Считая c-addr u входным потоком, вычислить её интерпретатором xt

Сборка 102

* Косметические изменения

! Ошибка в слове OPTIONS - проявлялась если в процессе обработки ком. строки
  происходил exeption

* Изменен copyright в exe стабе.

+ Дописаны комментарии к некоторым словам

* CMOVE теперь снова пересылает байтами, а не ячейками. Для ситуации типа:
  PAD DUP 1+ 10 CMOVE - заполняем 10 ячеек PAD первым символом.
  Скорость данного слова немного уменьшилась.

+ Если лог уже открыт, STARTLOG сначала закрывает его, а потом уже открывает
  снова. Так что повторное STARTLOG можно рассматривать как очистку лога.

+ (INIT) обнуляет H-STDLOG

+ 8 THROW в HEAP-COPY более честно, чем 0 MAX.
  В спф, например употребление 2-х раз конструкции PAD -1 HEAP-COPY 'валит'
  форт систему.

+ Дизассемблер теперь понимает float литералы.

! Возникновение exeption на Windows95 при обработке командной строки
  зачастую приводило к зависанию машины. Исправлено ERROR2. (~mak)

* Слово DOES> компилирует оптимизируемую инлайн вставку (~mak)

* ?DUP и EXECUTE идут инлайн вставками, что не мешает использовать их
  в режиме интерпретации, также так: ['] EXECUTE COMPILE,

* THROW идет спец. инлайн вставкой в расчете на то, что в 99 случаях вызовов
  THROW из 100 входным параметром является 0. Добавлено слово (THROW).
  Полезно например при частых вызовах WinSock ф-ий.

Сборка 103
03.Jan.2001

! Исправлен NOTFOUND. Надеюсь, в последний раз :)
  А также последнее слово после :: теперь может изменять
  CONTEXT как угодно, при возврате все будет восстановлено.

+ Новый тип ошибки -2011 в spf.err (Например: asdasd::asdasd)

+ При создании хипа к EXTRA-MEM добавляется CELL. На случай EXTRA-MEM 0! SAVE ...

* ?DUP EXECUTE THROW прогоняются через оптимизатор, а не только инлайнятся

* STARTUP-THREAD переименовано в AT-THREAD-STARTING
  STARTUP-PROCESS -> AT-PROCESS-STARTING

+ Добавлены слова (scattered colon): AT-THREAD-FINISHING AT-PROCESS-FINISHING

+ Адрес каждой USER-CREATE и CREATE области данных выравнен на CELL
  В тестах, использующих CREATE это дало 10% ускорение. Benchmarks показали
  что на реальном тесте (упаковка больших объемов данных) jpf 103
  на 10% быстрее SwiftForth.

Сборка 104

+ <EXC-DUMP> теперь всегда пишет в H-STDERR   (~micro)

+ ERROR2 теперь не изменяет H-STDOUT (Это делает MAIN1)

+ CR TYPE и EMIT не пишут в H-STDOUT если там 0. То есть для отладки
  GUI приложений достаточно открыть лог и обычным TYPE...
  Хотя напоминаю, есть слово TO-LOG

+ Оптимизация THROW ?DUP (~mak)

* Небольшая модификация (EXC)

* Коррекция USER-ALLOT

+ Оптимизация 0 LIT, и DLIT,
  Вместо MOV EAX, # 0 теперь XOR EAX, EAX

+ BEGIN DO выравнивают тело цикла на 4 и заполняет NOP

+ В модулях можно не использовать EXPORT

! Подправлено ' на случай если слово из входного потока не найдем.

+ Слова {{ и }} в compiler\spf_modules.f

! WINAPI: не добавляет в WINAPLINK если CURRENT является временным
  словарем (~ruvim)

! DEPTH теперь в WNDPROC: и TASK: показывает истинную глубину
  стека данных. Введено слово CALLBACK: ( xt n "name" -- ) \ n в ячейках
  USER-INIT ( -- ) изменено на
  : USER-INIT ( n )
  \ n - размер параметров, к-е Windows передает callback процедуре (в байтах)
  Слово EXTERN ( -- ) -> EXTERN ( n -- )

Сборка 105

+ Еще больше оптимизации от ~mak.

+ Добавлены SHEADER ( addr u -- ) и CREATED ( addr u -- ) (~ruvim)

+ В exe-stub секция кода сменила флаг IMAGE_SCN_CNT_INITIALIZED_DATA
  на IMAGE_SCN_CNT_CODE IMAGE_SCN_MEM_EXECUTE OR

! INCLUDE-FILE стало более акуратно. Буфера и файлы освобождаются и
  восстанавливаются даже если при подключении возникло exeption.

+ Добавлена справка. Наберите HELP.
  Затем например HELP ~day
  или HELP ~mak

+ Введено слово <EOF> - заканчивает трансляцию текущего файла.
  Только текущего!

Сборка 106

! Исправлено INCLUDE-FILE - неверно показывался информация об ошибке
  в подключаемом файле.

+ Новое слово в lib\ext\help.f  - TOPIC

+ Доработана справка

11.Jan.2001

+ При компиляции spf не подключается spf.ini
  (OPTIONS выполняются до SPF-INI)

+ Похорошел промт форт системы

* <EOF> заменено на \EOF (заодно изменен алгоритм)

+ Переход на spf 4.0 и CVS

+ Слово BUILD-DATE ( -- T ) где T - counted string соответствующая
  дате последней сборки.

! Исправлены ERROR2 и OPTIONS. Попробуйте на спф такую конструкцию:
  OPTIONS BYE

! Добавлена установка ConsoleMode. Предохраняет от ошибок при чтении с консоли
  при запуске форта другим процессом (например extcomm плагин для фара).
  (~micro)

+ KEY ACCEPT TYPE стали векторными. Удобно для подключения GUI например,
  и вообще любого контроля за вводом/выводом.

! Исправлен серьезный баг в tc_spf.f

+ Слово USER-VECT ( "name" -- )

+ Слово ERROR2 факторизовано.
  Слово DECODE-ERROR ( n u -- c-addr u ) Note: использует PAD
  где u - константа FORTH_ERROR либо другая определенная пользователем.
  см. также lib\windows\winerr.f

+ USER-VALUE инлайнится (~mak)

+ Слово USER-INIT факторизовано, выделено слово POOL-INIT ( n -- )

* Область форматного преобразования _всегда_ заканчивается нулем.
  Используется при передаче строки ф-ям Windows. Смотрите обновленный
  пример ~day\joop\samples\clock.f

* Слова ANSI>OEM и OEM>ANSI НЕ использут PAD. Все равно там не Unicode
  ф-ии используются...

Версия 4 Сборка 01

+ В CONSOLE-HANDLES установка атрибутов окна. На случай extcomm+windows98

+ новая версия spfgui - протестировано в Windows98. Эх, MS, MS :)


Сборка 02

* Установки атрибутов консоли переехали из CONSOLE-HANDLES в spf.ini

* Из AT-PROCESS-FINISHING убрано DESTROY-HEAP (если были ошибки при работе
  с хипом, в этой строчке могло быть зависание программы)

! WORD теперь реентерабельно и пользуется SYSTEM-PAD вместо HERE
  Введено слово SYSTEM-PAD - дает начало области форматного
  преобразования. Следующие условия очень маловероятны:
  1. Нужен результат WORDS
  2. Одновременно нужен результат форматного преобразования, причем
     этот результат превышает 4096-255=3840 байт (форматное преобразование
     заполняет свой буфер с конца).

! баг в DECODE-ERROR - использовался ?SLITERAL когда в STATE был
  режим компиляции... (~micro)

Сборка 03

+ Новый оптимизатор, использующий кольцевой буфер, а не реверс (~mak)

* MAIN1 возвращен в состояние spf3 (~ruvim)

+ spfgui 0.2 запоминает историю ввода, слушается клавиш влево/вправо/home/end
  /delete а также вывод ускорен на Win98
  примерно на 30%, на Win NT/2000 примерно на 125%
  (железо с аппаратным ускорением).

+ LOOP REPEAT AGAIN учитывают short branch

+ lib\ext\locals.f оптимизируют получение адреса локальной переменной

+ Слово QCMOVE - копирует словами, а не байтами, используется в MOVE

* NOTFOUND больше не меняет >IN перед THROW (~ss)

* ENVIRONMENT? и DECODE-ERROR не выделяют дополнительных буферов.

* Синтаксис :: работает для всех слов, возвращающих wid, а не только
  для VOCABULARY
  например:
  WORDLIST CONSTANT test
  ...
  test::xxx
  Но не разрешаются такие конструкции: FORTH::DUP::DUP

+ VALUE переменная NEW-WINAPI? ( -- f )
  Если f=true то слово WINAPI: имеет синтаксис
  число_параметров WINAPI: имя_слова имя_функции имя_dll
  например:
     1  WINAPI: RegisterClassEx RegisterClassExW USER32.DLL
  Данный синтаксис поддерживается ds-forth и рекомендуется к использованию
  в целях улучшения переностимости форт-программ.

+ По S" FORTH-SYS" ENVIRONMENT? возвращает строку SP-FORTH
  По S" FORTH-MAJOR" возвращает major версию форт системы
  По S" FORTH-DATE" возвращает строку, означающую дату сборки,
  например: 29.Jan.2001

Note: начиная с данной версии спф будет поставляться с пустой /devel
и с пустой /samples директориями. Оные будут формироваться и поставляться
отдельно от спф.
СПФ берет курс на пополнение каталога /lib - сюда будут включаться
общепризнанные, отлаженные и не конфликтующие между собой
библиотеки разных производителей из /devel
В далеком будущем каталог /lib возможно будет перенесен в отдельный пакет...

Сборка 4

! баг в SAVE - сработал при определенных условиях
! баг в DECODE-ERROR - неверное сообщение о неизвестной ошибке
! заработало C" в целевом компиляторе

+ Оптимизация слов, созданных --
+ Добавлена забытая оптимизация USER-VALUE
+ Добавлены слова для работы с потоками в файл Win\spf_win_io.f
  Примерно в 8 раз возросла скорость REFILL (причем мы обогнали MSVCRT)

+ H-STDIN и SOURCE-ID стали потоками чтения, а не файлами.
  Это значит, что
  - операции чтения происходят поблочно
  - reposition при чтении строки не делается
  - не стоит обращаться к потокам ф-ми работы с файлами.
    Нужно использовать слова STREAM-FILE ( s -- h ) и
    FILE>RSTREAM ( h -- s )
    (например нужно исправить библиотеки ~ac\lib\str*.f -
     слово PARSE" перед FILE-SIZE поставить STREAM-FILE)

  По умолчанию размер value буфера RSTREAM-BUF определен 512 байт.
  Операция чтения из потоков чтения - виртуальная (!). Подробности
  смотрите в реализации.
  СПФорт теперь может запросто играть роль telnet сервера

* Новая версия макрооптимизатора (~mak)

Сборка 5

+ Слово PERCEIVE-WITH ( i*x addr u xt -- j*x ior )
  Сделать addr u - входным буфером, выполнить xt по CATCH
  Если exception #TIB >IN и CURSTR не восстанавливаем!
  Используетя в INCLUDE-FILE DECODE-ERROR ENVIRONMENT?

Сборка 6

! баг в инициализации (обнаружился в acProxy)
! баг в SAVE (уже второй since 3.75... )
+ Улучшена оптимизация UNTIL и ?BRANCH, (~mak)
+ cfa высокоуровневых слов форт системы выровнены на 4
+ Оптимизатор автоматически заменяет call ret на jmp (кроме RECURSE)
+ Вывод ошибок снова идет в H-STDOUT - удобно для отладки.
* PERCEIVE-WITH -> RECEIVE-WITH
+ новая gui консоль spf4wc (A. Filatkin+все,все,все...)
+ Слово SKIP1 в парсере. Очень полезное слово при любом парсинге.

from ~mak:

* псевдо-векторный INTERPRET (see &INTERPRET)
+ FIELD - аналог --

note: не забудьте перед сохранением многопоточных приложений сделать
      0x100 EXTRA-MEM дабы ваша программа не жрала памяти больше чем нужно.
      (особенно всяким серверам)

Сборка 7

! по умолчанию замена call ret в программе не производиться.
  ?C-JMP=FALSE
  Форт система откомпилирована с ?C-JMP=TRUE
! Процедуры ANSI>OEM и наоборот работают теперь с буфером, на случай:
  S" asd" ANSI>OEM чтобы не было многократных перекодировок.
! Пофиксен баг в INCLUDED, система вывода ошибок переписана by ~ruvim
+ Сообщение isn't unique выводиться только для CONTEXT словаря.
  Безусловно, несколько пострадала информативность, но в предыдущей версии
  из-за большого количества этих сообщений на них никто не смотрел...

+ Case нечуствительность в lib\ext\caseins.f и новом DIGIT

! Подправлено ~yz/automation.f
+ ~day/mysql

note: Люди, не делайте так: 0 LIT, HERE CELL-

5.July.2002 4.00.008

+ Вместо ручного подключения иконок, ресурсы подключаются по технологии ~yz
  из spf.fres.
! Вставка символов перевода строки в лог перенесена из MAIN1 в ACCEPT1,
  а то лог странно выглядел.
+ Вместо константы #ST-RES введена переменная ST-RES - размер стека данных.
  По умолчанию размер стека данных - около 4Кб. ~af
! Добавлена потерянная в 7 билде система вывода ошибок от ~ruvim.
+ Большой пакет изменений из uspf4m10-uspf4m13 ~mak
- Убрана переменная ERASED-CNT. Вместо нее введено слово PROCESS-INIT.
* Ширина колонок в WORDS изменена с 8 до 15.
! RECEIVE-WITH выделяет теперь для TIB  C\L+2 байта. REFILL передает READ-LINE
  в качестве буфера TIB размером C\L, а READ-LINE требует чтобы буфер реально
  содержал на два байта больше чем объявлено.
* Снова используется асм-версия DIGIT, понимающая только большие буквы.
  Case-нечувствительный DIGIT перенесен в либу caseins.
+ Добавлена переменная SOURCE-ID-XT - хранит xt слова, считывающего из
  SOURCE-ID одну строку. Необходима в том случае, когда SOURCE-ID не файл,
  а например область памяти. ~af
- Все слова для работы с потоками ввода-вывода вынесены в отдельную либу.
+ (INCLUDED) стал векторным.
+ INCLUDED от ~ruvim - подключение файла по относительному "текущему" каталогу.
- Из ядра убраны несколько не используемых функций Windows.
+ Добавлено слово .TO-LOG - печатает верхнее число на стеке в лог-файл.
* Изменен WINAPI: - добавлено поле содержащее количество параметров, которые
  передаются функции. Это число вычисляется при первом вызове функции. ~ruvim
! Слово ; очищает буфер JpBuff в оптимизаторе.
! Учтено возможное наличие символа tab в исходниках. Изменены - REQUIRE,
  LAST-WORD.
! Изменена обработка hex-констант. Если следующая за 0x часть токена
  содержит символы, не являющиеся 16-ричными цифрами, то токен не считается
  hex-константой. Исключение - в конце константы может стоять буква L.

10 ноября 2002  4.00.009

+ Обновленный оптимизатор от ~mak.
+ Новый SEH. ~ac
! Исправлен READ-LINE. ~ac
! SAVE генерирует более правильный (с точки зрения WinXP) заголовок файла.
  При этом создается программа, не содержащая ресурсов.
  Если необходимы ресурсы, то можно использовать src\tsave.f :
  S" name.exe" S" src\spf.fres" src\tsave.f

! CONSOLE-HANDLES перенесен в начало цикла QUIT.

27 февраля 2003  4.00.010

* Обновленный и усиленный оптимизатор от ~mak.
+ Новая иконка. ~yz
* Ассеблерная версия /MOD.
! В код -TRAILING и CMOVE> добавлена инструкция CLD. Без нее применение
  этих слов в WinXP может вызвать крах.
* Слова, принимающие в качестве аргумента строку со счетчиком, определены
  через аналогичные слова, работающие со стоками addr u. ~af
* Переписана часть кода с целью уменьшения количества внутренних переменных.~af
! ?SLITERAL2 правильно обрабатывает попытку инклюдить слова
  содержащие символы ? и *. ~af
! Длина буфера INPUT_RECORD удвоена. ~ruvim
+ Добавлены векторы FIND-FULLNAME и PROCESS-ERR. Теперь в INVLUDED используется
  три вектора: FIND-FULLNAME - интеллектуальный поиск подключаемого файла;
  (INCLUDED) - трансляция файла; PROCESS-ERR - обработка ошибки трансляции.
- Удалено слово +SourcePath.

18 марта 2003  4.00.011

Корректирующий билд:)
* Исправления в оптимизаторе.
! Исправлены F**, FACOS, FASIN. Ввод-вывод плавающей точки сделан в
  десятичной системе (независимо от BASE). ~af
* Факторизован TITLE. (TITLE) печатает инфу без проверок, проверки остались
  в TITLE.
* OPTIONS перенесен в раздел SPF-INIT?. ~ac
! CUT-PATH теперь возвращает строку, заканчивающуюся нулем.

25 сентября 2003  4.00.012

* Обновленный оптимизатор от ~mak.(USPF4M43)
! Исправлены FEXP, FEXPM1. Теперь правильно работают с любыми положительными
  числами. ~af
* Переделан WINAPI:. Теперь все вызовы идут через API-CALL. То есть WINAPI:
  подходит и для cdecl и для stdcall функций. Вариант для stdcall, учитывающий
  количество параметров, перенесен в \LIB\WIN\api-call\altwinapi.f
+ RECURSE теперь работает и в :NONAME словах. ~mak

16 января 2004 4.00.014

! два фикса оптимизатора (~mac)
! откат в API-CALL на размер фрейма стека 60 байт вместо 64.
  (64 не работает с некоторыми dll) (~af)
! фикс FILE-EXIST (~ruv, ~ac)
! THROW теперь реагирует на 109 правильно
! новая схема реагирования на конец входного потока (H-STDIN),
  устранено зависание с http://www.codeproject.com/dialog/quickwin.asp
* HASH переписано и работает как минимум на 50% быстрее и качественнее. (~day)
* AT-PROCESS-STARTING теперь запускается после системной инициализации
  процесса (стеки, переменные, хип).
* Оптимизированы CMOVE FILL, QCMOVE переопределено через CMOVE (~day) 
* NON-OPT-WL включен в VOC-LIST (~day)
+ SLIT, (~ruv) факторизация SLITERAL
+ векторизованный поиск по словарю через VECT, для quick-swl.f (~ruv)
  

  из библиотек хотелось бы отметить ~pinka\spf\quick-swl.f - ускоряющую
  поиск по словарю на порядок

29 апреля 2004 4.00.015

! два фикса оптимизатора (~mac)
! фикс FM/MOD Serguei V. Jidkov [mailto:jsv@gorod.bryansk.ru]  
   3 % -7 =>  0,  3     !! ошибка, должно быть -1, -4
  -3 %  7 =>  0, -3     !! ошибка, должно быть -1,  4   
! фикс REFILL (очистка стека если поймали -1002 исключение), факторизация (~ruv)
+ проверка на бесконечный INCLUDE, максимальная глубина 64. (~day)

7 сентября 2004

! фикс оптимизатора (что-то с WHILE и R>) (~mac)
! исправлен многократый дамп при аппаратном исключении в потоке или callback (~day)
! теперь SPF exe пакуются UPX и AsProtect, фикс tsave.f (Igor Nikolayenko)
! Правило F0E не учитывало запись в ячейку памяти, при оптимизации двойного 
  считывания из этой ячейки памяти. (~mak)
! fix comment for /MOD (~ruv)

+ WINAPI: при ненахождении dll или функции runtime делает ABORT
  новые слова-вектора LIB-ERROR, PROC-ERROR, т.е. можно эту ошибку выводить
  через MessageBox например. (~day)
+ PROCESS-ERR перенесен из TranslateFlow в RECEIVE-WITH-XT элиминировано 
  ('исчезнуто') слово (TranslateFlow) и слово (TranslateFlowWith) (~ruv)
+ добалено(факторизация) слово S, и комментарии
+ Значительно улучшена оптимизация кода, особенно в тесте MD5


Значки в whatnews.txt:

* - изменение без потери или приобретения функциональности
! - исправление ошибки
+ - добавление новых функций
- - удаление

Developers:

~ruvim   = Ruvim Pinka          ruvim@forth.org.ru
~boa     = Bordachev Andrej     glareboa@mail.ru
~day     = Dmitry Yakimov       ftech@tula.net
~micro   = Dmitry Zyryanov      micro@forth.org.ru
~1001    = Konstantin Tarasov   const@penza.com.ru
~ac      = Andrey Cherezov      andrey@cherezov.koenig.su
~nemnick = Nicholas Nemtsev     nn@vdk.psc.ru
~mak     = Michael Maximov      mak@mail.rtc.neva.ru
~yz      = Yuriy Zhilovets      yz@forth.org.ru
~mlg     = Michael Gassanenko   mlg@forth.org
~af      = Andrey Filatkin      af@forth.org.ru
~oleg_sh = Oleg Shalyopa
~trasher = Dmitry Bobrik

Igor Nikolayenko <in4@forth.org.ru>